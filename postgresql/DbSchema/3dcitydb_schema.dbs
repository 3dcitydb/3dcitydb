<?xml version="1.0" encoding="UTF-8" ?>
<project name="PostgreSQL" id="Project-1a7" database="PostgreSQL" >
	<schema name="citydb" >
		<table name="ade" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[nextval('ade_seq'::regclass)]]></defo>
			</column>
			<column name="adeid" type="varchar" length="256" decimal="0" jt="12" mandatory="y" />
			<column name="name" type="varchar" length="1000" decimal="0" jt="12" mandatory="y" />
			<column name="description" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="version" type="varchar" length="50" decimal="0" jt="12" />
			<column name="db_prefix" type="varchar" length="10" decimal="0" jt="12" mandatory="y" />
			<column name="xml_schemamapping_file" type="text" decimal="0" jt="12" />
			<column name="drop_db_script" type="text" decimal="0" jt="12" />
			<column name="creation_date" type="timestamptz" decimal="6" jt="93" />
			<column name="creation_person" type="varchar" length="256" decimal="0" jt="12" />
			<index name="ade_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="aggregation_info" >
			<column name="child_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="parent_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="join_table_or_column_name" type="varchar" length="30" decimal="0" jt="12" mandatory="y" />
			<column name="min_occurs" type="integer" length="10" decimal="0" jt="4" />
			<column name="max_occurs" type="integer" length="10" decimal="0" jt="4" />
			<column name="is_composite" type="numeric" jt="2" />
			<index name="aggregation_info_pk" unique="PRIMARY_KEY" >
				<column name="child_id" />
				<column name="parent_id" />
				<column name="join_table_or_column_name" />
			</index>
			<fk name="aggregation_info_fk1" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="child_id" pk="id" />
			</fk>
			<fk name="aggregation_info_fk2" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="parent_id" pk="id" />
			</fk>
		</table>
		<table name="appear_to_surface_data" >
			<column name="surface_data_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="appearance_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="appear_to_surface_data_pk" unique="PRIMARY_KEY" >
				<column name="surface_data_id" />
				<column name="appearance_id" />
			</index>
			<index name="app_to_surf_data_fkx" unique="NORMAL" >
				<column name="surface_data_id" />
			</index>
			<index name="app_to_surf_data_fkx1" unique="NORMAL" >
				<column name="appearance_id" />
			</index>
			<fk name="app_to_surf_data_fk1" to_schema="citydb" to_table="appearance" update_action="cascade" >
				<fk_column name="appearance_id" pk="id" />
			</fk>
			<fk name="app_to_surf_data_fk" to_schema="citydb" to_table="surface_data" delete_action="cascade" update_action="cascade" >
				<fk_column name="surface_data_id" pk="id" />
			</fk>
		</table>
		<table name="appearance" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('appearance_seq'::regclass)]]></defo>
			</column>
			<column name="gmlid" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gmlid_codespace" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name_codespace" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="description" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="theme" type="varchar" length="256" decimal="0" jt="12" />
			<column name="citymodel_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="cityobject_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="appearance_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="appearance_inx" unique="NORMAL" >
				<column name="gmlid" />
				<column name="gmlid_codespace" />
			</index>
			<index name="appearance_theme_inx" unique="NORMAL" >
				<column name="theme" />
			</index>
			<index name="appearance_citymodel_fkx" unique="NORMAL" >
				<column name="citymodel_id" />
			</index>
			<index name="appearance_cityobject_fkx" unique="NORMAL" >
				<column name="cityobject_id" />
			</index>
			<fk name="appearance_citymodel_fk" to_schema="citydb" to_table="citymodel" update_action="cascade" >
				<fk_column name="citymodel_id" pk="id" />
			</fk>
		</table>
		<table name="citymodel" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('citymodel_seq'::regclass)]]></defo>
			</column>
			<column name="gmlid" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gmlid_codespace" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name_codespace" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="description" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="envelope" type="geometry" decimal="0" jt="1111" />
			<column name="creation_date" type="timestamptz" decimal="6" jt="93" />
			<column name="termination_date" type="timestamptz" decimal="6" jt="93" />
			<column name="last_modification_date" type="timestamptz" decimal="6" jt="93" />
			<column name="updating_person" type="varchar" length="256" decimal="0" jt="12" />
			<column name="reason_for_update" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="lineage" type="varchar" length="256" decimal="0" jt="12" />
			<index name="citymodel_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="citymodel_inx" unique="NORMAL" >
				<column name="gmlid" />
				<column name="gmlid_codespace" />
			</index>
			<index name="citymodel_envelope_spx" unique="NORMAL" >
				<column name="envelope" />
			</index>
		</table>
		<table name="cityobject_member" >
			<column name="citymodel_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="cityobject_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="cityobject_member_pk" unique="PRIMARY_KEY" >
				<column name="citymodel_id" />
				<column name="cityobject_id" />
			</index>
			<index name="cityobject_member_fkx" unique="NORMAL" >
				<column name="cityobject_id" />
			</index>
			<index name="cityobject_member_fkx1" unique="NORMAL" >
				<column name="citymodel_id" />
			</index>
			<fk name="cityobject_member_fk1" to_schema="citydb" to_table="citymodel" update_action="cascade" >
				<fk_column name="citymodel_id" pk="id" />
			</fk>
		</table>
		<table name="codelist" >
			<comment><![CDATA[added at 3DCityDB Version 5.0 for CityGML 3.0]]></comment>
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('codelist_id_seq'::regclass)]]></defo>
			</column>
			<column name="codelist_type" type="varchar" length="256" decimal="0" jt="12" />
			<column name="url" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="mimetype" type="varchar" length="256" decimal="0" jt="12" />
			<index name="codelist_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="codelist_codelist_type_unique" unique="UNIQUE_KEY" >
				<column name="codelist_type" />
			</index>
			<index name="codelist_codelist_type_btr" unique="NORMAL" >
				<column name="codelist_type" />
			</index>
		</table>
		<table name="codelist_entry" >
			<comment><![CDATA[added at 3DCityDB Version 5.0 for CityGML 3.0]]></comment>
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('codelist_entry_id_seq'::regclass)]]></defo>
			</column>
			<column name="codelist_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="code" type="varchar" length="256" decimal="0" jt="12" />
			<column name="definition" type="varchar" length="256" decimal="0" jt="12" />
			<index name="codelist_entry_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="unique_codelist_entry_codelist_id_code" unique="UNIQUE_KEY" >
				<column name="codelist_id" />
				<column name="code" />
			</index>
			<index name="codelist_entry_codelist_id_idx" unique="NORMAL" >
				<column name="codelist_id" />
			</index>
			<fk name="fk_codelist_entry_codelist" to_schema="citydb" to_table="codelist" delete_action="cascade" update_action="cascade" >
				<fk_column name="codelist_id" pk="id" />
			</fk>
		</table>
		<table name="database_srs" >
			<column name="srid" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="gml_srs_name" type="varchar" length="1000" decimal="0" jt="12" />
			<index name="database_srs_pk" unique="PRIMARY_KEY" >
				<column name="srid" />
			</index>
		</table>
		<table name="feature" >
			<comment><![CDATA[added at 3DCityDB Version 5.0 for CityGML 3.0]]></comment>
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('feature_id_seq'::regclass)]]></defo>
				<comment><![CDATA[Primary key / surrogate]]></comment>
			</column>
			<column name="objectclass_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<comment><![CDATA[Foreign key to OBJECTCLASS(id) - CityGML feature type]]></comment>
			</column>
			<column name="is_toplevel" type="boolean" length="1" decimal="0" jt="-7" >
				<comment><![CDATA[true, if this feature is a toplevel feature]]></comment>
			</column>
			<column name="space_or_boundary_type" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)]]></comment>
			</column>
			<column name="gmlid" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gmlid_namespace" type="varchar" length="256" decimal="0" jt="12" />
			<column name="identifier" type="varchar" length="256" decimal="0" jt="12" />
			<column name="identifier_namespace" type="varchar" length="256" decimal="0" jt="12" />
			<column name="envelope" type="geometry" decimal="0" jt="1111" >
				<comment><![CDATA[Bounding volume of the feature (if it has a geometry)]]></comment>
			</column>
			<column name="last_modification_date" type="timestamptz" decimal="6" jt="93" >
				<comment><![CDATA[Adopted from 3DCityDB Version 4]]></comment>
			</column>
			<column name="updating_person" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[Adopted from 3DCityDB Version 4]]></comment>
			</column>
			<column name="reason_for_update" type="varchar" length="4000" decimal="0" jt="12" >
				<comment><![CDATA[Adopted from 3DCityDB Version 4]]></comment>
			</column>
			<column name="lineage" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[Adopted from 3DCityDB Version 4]]></comment>
			</column>
			<column name="xml_source" type="text" decimal="0" jt="12" >
				<comment><![CDATA[Adopted from 3DCityDB Version 4 - has this been used in the past?]]></comment>
			</column>
			<column name="creation_date" type="timestamptz" decimal="6" jt="93" />
			<column name="termination_date" type="timestamptz" decimal="6" jt="93" />
			<column name="valid_from" type="timestamptz" decimal="6" jt="93" />
			<column name="valid_to" type="timestamptz" decimal="6" jt="93" />
			<index name="feature_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="feature_gmlid_unique" unique="UNIQUE_KEY" >
				<column name="gmlid" />
			</index>
			<index name="feature_objectclass_id_idx" unique="NORMAL" >
				<column name="objectclass_id" />
			</index>
			<index name="feature_is_toplevel_btr" unique="NORMAL" >
				<column name="is_toplevel" />
			</index>
			<index name="feature_gmlid_btr" unique="NORMAL" >
				<column name="gmlid" />
			</index>
			<index name="feature_identifier" unique="NORMAL" >
				<column name="identifier" />
			</index>
			<index name="feature_envelope_gist" unique="NORMAL" >
				<column name="envelope" />
			</index>
			<fk name="feature_objectclass_fk" to_schema="citydb" to_table="objectclass" update_action="cascade" >
				<fk_column name="objectclass_id" pk="id" />
			</fk>
		</table>
		<table name="feature_relation" >
			<comment><![CDATA[added at 3DCityDB Version 5.0 for CityGML 3.0]]></comment>
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('feature_relation_id_seq'::regclass)]]></defo>
			</column>
			<column name="from_feature" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="to_feature" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="namespace" type="varchar" length="256" decimal="0" jt="12" />
			<column name="name" type="varchar" length="256" decimal="0" jt="12" />
			<column name="relationtype" type="varchar" length="256" decimal="0" jt="12" />
			<column name="relationtype_codelist" type="varchar" length="256" decimal="0" jt="12" />
			<index name="feature_relation_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="feature_relation_from_to_namespace_name_unique" unique="UNIQUE_KEY" >
				<column name="from_feature" />
				<column name="to_feature" />
				<column name="namespace" />
				<column name="name" />
			</index>
			<index name="feature_relation_from_feature_idx" unique="NORMAL" >
				<column name="from_feature" />
			</index>
			<index name="feature_relation_to_feature_idx" unique="NORMAL" >
				<column name="to_feature" />
			</index>
			<index name="feature_relation_namespace_btr" unique="NORMAL" >
				<column name="namespace" />
			</index>
			<index name="feature_relation_name_btr" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="feature_relation_relationtype_btr" unique="NORMAL" >
				<column name="relationtype" />
			</index>
			<fk name="feature_relation_to_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="to_feature" pk="id" />
			</fk>
			<fk name="feature_to_feature_relation_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="from_feature" pk="id" />
			</fk>
		</table>
		<table name="grid_coverage" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('grid_coverage_seq'::regclass)]]></defo>
			</column>
			<column name="rasterproperty" type="raster" decimal="0" jt="1111" />
			<column name="st_convexhull(rasterproperty)" type="varchar" jt="12" spec="functional" />
			<index name="grid_coverage_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="grid_coverage_raster_spx" unique="NORMAL" >
				<column name="st_convexhull(rasterproperty)" />
			</index>
		</table>
		<table name="implicit_geometry" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('implicit_geometry_seq'::regclass)]]></defo>
			</column>
			<column name="mime_type" type="varchar" length="256" decimal="0" jt="12" />
			<column name="reference_to_library" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="library_object" type="bytea" decimal="0" jt="-2" />
			<column name="relative_brep_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="relative_other_geom" type="geometry" decimal="0" jt="1111" />
			<index name="implicit_geometry_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="implicit_geom_ref2lib_inx" unique="NORMAL" >
				<column name="reference_to_library" />
			</index>
			<index name="implicit_geom_brep_fkx" unique="NORMAL" >
				<column name="relative_brep_id" />
			</index>
			<fk name="implicit_geom_brep_fk" to_schema="citydb" to_table="surface_geometry" update_action="cascade" >
				<fk_column name="relative_brep_id" pk="id" />
			</fk>
		</table>
		<table name="index_table" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[nextval('index_table_id_seq'::regclass)]]></defo>
			</column>
			<column name="obj" type="index_obj" decimal="0" jt="2002" />
			<index name="index_table_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="objectclass" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="ade_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="baseclass_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="classname" type="varchar" length="256" decimal="0" jt="12" />
			<column name="is_ade_class" type="numeric" jt="2" />
			<column name="is_toplevel" type="numeric" jt="2" />
			<column name="superclass_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="tablename" type="varchar" length="30" decimal="0" jt="12" />
			<index name="objectclass_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="objectclass_superclass_fkx" unique="NORMAL" >
				<column name="superclass_id" />
			</index>
			<index name="objectclass_baseclass_fkx" unique="NORMAL" >
				<column name="baseclass_id" />
			</index>
			<fk name="objectclass_ade_fk" to_schema="citydb" to_table="ade" delete_action="cascade" update_action="cascade" >
				<fk_column name="ade_id" pk="id" />
			</fk>
			<fk name="objectclass_baseclass_fk" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="baseclass_id" pk="id" />
			</fk>
			<fk name="objectclass_superclass_fk" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="superclass_id" pk="id" />
			</fk>
		</table>
		<table name="property" >
			<comment><![CDATA[added at 3DCityDB Version 5.0 for CityGML 3.0]]></comment>
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('property_id_seq'::regclass)]]></defo>
				<comment><![CDATA[Primary key / surrogate]]></comment>
			</column>
			<column name="feature_id" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL]]></comment>
			</column>
			<column name="relation_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="parent_id" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group]]></comment>
			</column>
			<column name="root_id" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)]]></comment>
			</column>
			<column name="namespace" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[CityGML 3.0 namespace in which this property is defined]]></comment>
			</column>
			<column name="name" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)]]></comment>
			</column>
			<column name="index_number" type="integer" length="10" decimal="0" jt="4" >
				<comment><![CDATA[Index number (if multiple properties with the same name are stored and the order should be preserved)]]></comment>
			</column>
			<column name="datatype" type="varchar" decimal="0" jt="12" >
				<comment><![CDATA[the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)]]></comment>
			</column>
			<column name="data_valtype" type="integer" length="10" decimal="0" jt="4" >
				<comment><![CDATA[tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)]]></comment>
			</column>
			<column name="val_int" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_double" type="numeric" jt="2" />
			<column name="val_string" type="varchar" length="256" decimal="0" jt="12" />
			<column name="val_date" type="timestamptz" decimal="6" jt="93" />
			<column name="val_uri" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="val_geometry" type="geometry" decimal="0" jt="1111" />
			<column name="val_surface_geometry" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to SURFACE_GEOMETRY(id)]]></comment>
			</column>
			<column name="val_implicitgeom_id" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to IMPLICIT_GEOMETRY(id)]]></comment>
			</column>
			<column name="val_implicitgeom_refpoint" type="geometry" decimal="0" jt="1111" >
				<comment><![CDATA[base point in 3D world coordinates for the instantiation of the implicit geometry]]></comment>
			</column>
			<column name="val_implicitgeom_transform" type="varchar" length="1000" decimal="0" jt="12" >
				<comment><![CDATA[4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence]]></comment>
			</column>
			<column name="val_grid_coverage" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to GRID_COVERAGE(id)]]></comment>
			</column>
			<column name="val_appearance" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to APPEARANCE(id)]]></comment>
			</column>
			<column name="val_dynamizer" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to APPEARANCE(id)]]></comment>
			</column>
			<column name="val_feature" type="bigint" length="19" decimal="0" jt="-5" >
				<comment><![CDATA[Foreign key to FEATURE(id)]]></comment>
			</column>
			<column name="val_feature_is_xlink" type="integer" length="10" decimal="0" jt="4" >
				<comment><![CDATA[0=related feature was represented inline, 1=related feature was referenced using an XLink]]></comment>
			</column>
			<column name="val_code" type="varchar" length="256" decimal="0" jt="12" >
				<comment><![CDATA[if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute]]></comment>
			</column>
			<column name="val_codelist" type="integer" length="10" decimal="0" jt="4" >
				<comment><![CDATA[Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)]]></comment>
			</column>
			<column name="val_uom" type="varchar" decimal="0" jt="12" >
				<comment><![CDATA[unit of measure (for all subtypes of gml:Measure); the value is stored in val_double]]></comment>
			</column>
			<column name="val_complex" type="json" decimal="0" jt="2000" >
				<comment><![CDATA[stores all data of complex datatypes as a JSON string (e.g. con:Height)]]></comment>
			</column>
			<column name="val_xml" type="xml" decimal="0" jt="2009" >
				<comment><![CDATA[stores XML data]]></comment>
			</column>
			<column name="(((val_complex -&gt;&gt; &#039;value&#039;::text))::double precision)" type="varchar" jt="12" spec="functional" />
			<index name="property_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="property_unique_feature_id_namespace_name_index" unique="UNIQUE_KEY" >
				<column name="feature_id" />
				<column name="namespace" />
				<column name="name" />
				<column name="index_number" />
			</index>
			<index name="property_feature_id_idx" unique="NORMAL" >
				<column name="feature_id" />
			</index>
			<index name="property_relation_id_idx" unique="NORMAL" >
				<column name="relation_id" />
			</index>
			<index name="property_parent_id_idx" unique="NORMAL" >
				<column name="parent_id" />
			</index>
			<index name="property_namespace_btr" unique="NORMAL" >
				<column name="namespace" />
			</index>
			<index name="property_name_btr" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="property_root_id_idx" unique="NORMAL" >
				<column name="root_id" />
			</index>
			<index name="property_conheight_val_complex_value_btr" unique="NORMAL" >
				<column name="(((val_complex -&gt;&gt; &#039;value&#039;::text))::double precision)" />
			</index>
			<index name="property_data_valtype_btr" unique="NORMAL" >
				<column name="data_valtype" />
			</index>
			<index name="property_val_feature_btr" unique="NORMAL" >
				<column name="val_feature" />
			</index>
			<index name="property_namespace_name_btr" unique="NORMAL" >
				<column name="namespace" />
				<column name="name" />
			</index>
			<index name="property_val_string_btr" unique="NORMAL" >
				<column name="val_string" />
			</index>
			<index name="property_val_uom_btr" unique="NORMAL" >
				<column name="val_uom" />
			</index>
			<index name="property_val_uri_btr" unique="NORMAL" >
				<column name="val_uri" />
			</index>
			<fk name="property_appearance_fk" to_schema="citydb" to_table="appearance" update_action="cascade" >
				<fk_column name="val_appearance" pk="id" />
			</fk>
			<fk name="property_codelist_fk" to_schema="citydb" to_table="codelist" update_action="cascade" >
				<fk_column name="val_codelist" pk="id" />
			</fk>
			<fk name="property_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="feature_id" pk="id" />
			</fk>
			<fk name="property_val_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="val_feature" pk="id" />
			</fk>
			<fk name="property_implicitgeom_id_fk" to_schema="citydb" to_table="implicit_geometry" update_action="cascade" >
				<fk_column name="val_implicitgeom_id" pk="id" />
			</fk>
			<fk name="property_parent_id_fk" to_schema="citydb" to_table="property" delete_action="cascade" update_action="cascade" options="DEFERRABLE INITIALLY DEFERRED" >
				<fk_column name="parent_id" pk="id" />
			</fk>
			<fk name="property_root_id_fk" to_schema="citydb" to_table="property" delete_action="cascade" update_action="cascade" options="DEFERRABLE INITIALLY DEFERRED" >
				<fk_column name="root_id" pk="id" />
			</fk>
			<fk name="property_surface_geometry_fk" to_schema="citydb" to_table="surface_geometry" update_action="cascade" >
				<fk_column name="val_surface_geometry" pk="id" />
			</fk>
		</table>
		<table name="schema" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[nextval('schema_seq'::regclass)]]></defo>
			</column>
			<column name="is_ade_root" type="numeric" jt="2" mandatory="y" />
			<column name="citygml_version" type="varchar" length="50" decimal="0" jt="12" mandatory="y" />
			<column name="xml_namespace_uri" type="varchar" length="4000" decimal="0" jt="12" mandatory="y" />
			<column name="xml_namespace_prefix" type="varchar" length="50" decimal="0" jt="12" mandatory="y" />
			<column name="xml_schema_location" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="xml_schemafile" type="bytea" decimal="0" jt="-2" />
			<column name="xml_schemafile_type" type="varchar" length="256" decimal="0" jt="12" />
			<column name="ade_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="schema_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<fk name="schema_ade_fk" to_schema="citydb" to_table="ade" delete_action="cascade" update_action="cascade" >
				<fk_column name="ade_id" pk="id" />
			</fk>
		</table>
		<table name="schema_referencing" >
			<column name="referencing_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="referenced_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="schema_referencing_pk" unique="PRIMARY_KEY" >
				<column name="referenced_id" />
				<column name="referencing_id" />
			</index>
			<index name="schema_referencing_fkx1" unique="NORMAL" >
				<column name="referenced_id" />
			</index>
			<index name="schema_referencing_fkx2" unique="NORMAL" >
				<column name="referencing_id" />
			</index>
			<fk name="schema_referencing_fk1" to_schema="citydb" to_table="schema" delete_action="cascade" update_action="cascade" >
				<fk_column name="referencing_id" pk="id" />
			</fk>
			<fk name="schema_referencing_fk2" to_schema="citydb" to_table="schema" delete_action="cascade" update_action="cascade" >
				<fk_column name="referenced_id" pk="id" />
			</fk>
		</table>
		<table name="schema_to_objectclass" >
			<column name="schema_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="objectclass_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<index name="schema_to_objectclass_pk" unique="PRIMARY_KEY" >
				<column name="schema_id" />
				<column name="objectclass_id" />
			</index>
			<index name="schema_to_objectclass_fkx1" unique="NORMAL" >
				<column name="schema_id" />
			</index>
			<index name="schema_to_objectclass_fkx2" unique="NORMAL" >
				<column name="objectclass_id" />
			</index>
			<fk name="schema_to_objectclass_fk2" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="objectclass_id" pk="id" />
			</fk>
			<fk name="schema_to_objectclass_fk1" to_schema="citydb" to_table="schema" delete_action="cascade" update_action="cascade" >
				<fk_column name="schema_id" pk="id" />
			</fk>
		</table>
		<table name="surface_data" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('surface_data_seq'::regclass)]]></defo>
			</column>
			<column name="gmlid" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gmlid_codespace" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="name_codespace" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="description" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="is_front" type="numeric" jt="2" />
			<column name="objectclass_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="x3d_shininess" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_transparency" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_ambient_intensity" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_specular_color" type="varchar" length="256" decimal="0" jt="12" />
			<column name="x3d_diffuse_color" type="varchar" length="256" decimal="0" jt="12" />
			<column name="x3d_emissive_color" type="varchar" length="256" decimal="0" jt="12" />
			<column name="x3d_is_smooth" type="numeric" jt="2" />
			<column name="tex_image_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="tex_texture_type" type="varchar" length="256" decimal="0" jt="12" />
			<column name="tex_wrap_mode" type="varchar" length="256" decimal="0" jt="12" />
			<column name="tex_border_color" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gt_prefer_worldfile" type="numeric" jt="2" />
			<column name="gt_orientation" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gt_reference_point" type="geometry" decimal="0" jt="1111" />
			<index name="surface_data_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="surface_data_inx" unique="NORMAL" >
				<column name="gmlid" />
				<column name="gmlid_codespace" />
			</index>
			<index name="surface_data_tex_image_fkx" unique="NORMAL" >
				<column name="tex_image_id" />
			</index>
			<index name="surface_data_objclass_fkx" unique="NORMAL" >
				<column name="objectclass_id" />
			</index>
			<index name="surface_data_spx" unique="NORMAL" >
				<column name="gt_reference_point" />
			</index>
			<fk name="surface_data_objclass_fk" to_schema="citydb" to_table="objectclass" update_action="cascade" >
				<fk_column name="objectclass_id" pk="id" />
			</fk>
			<fk name="surface_data_tex_image_fk" to_schema="citydb" to_table="tex_image" update_action="cascade" >
				<fk_column name="tex_image_id" pk="id" />
			</fk>
		</table>
		<table name="surface_geometry" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('surface_geometry_seq'::regclass)]]></defo>
			</column>
			<column name="gmlid" type="varchar" length="256" decimal="0" jt="12" />
			<column name="gmlid_codespace" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="parent_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="root_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="is_solid" type="numeric" jt="2" />
			<column name="is_composite" type="numeric" jt="2" />
			<column name="is_triangulated" type="numeric" jt="2" />
			<column name="is_xlink" type="numeric" jt="2" />
			<column name="is_reverse" type="numeric" jt="2" />
			<column name="solid_geometry" type="geometry" decimal="0" jt="1111" />
			<column name="geometry" type="geometry" decimal="0" jt="1111" />
			<column name="implicit_geometry" type="geometry" decimal="0" jt="1111" />
			<column name="cityobject_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="surface_geometry_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="surface_geom_inx" unique="NORMAL" >
				<column name="gmlid" />
				<column name="gmlid_codespace" />
			</index>
			<index name="surface_geom_parent_fkx" unique="NORMAL" >
				<column name="parent_id" />
			</index>
			<index name="surface_geom_root_fkx" unique="NORMAL" >
				<column name="root_id" />
			</index>
			<index name="surface_geom_cityobj_fkx" unique="NORMAL" >
				<column name="cityobject_id" />
			</index>
			<index name="surface_geom_solid_spx" unique="NORMAL" >
				<column name="solid_geometry" />
			</index>
			<index name="surface_geom_spx" unique="NORMAL" >
				<column name="geometry" />
			</index>
			<fk name="surface_geom_parent_fk" to_schema="citydb" to_table="surface_geometry" update_action="cascade" >
				<fk_column name="parent_id" pk="id" />
			</fk>
			<fk name="surface_geom_root_fk" to_schema="citydb" to_table="surface_geometry" update_action="cascade" >
				<fk_column name="root_id" pk="id" />
			</fk>
		</table>
		<table name="tex_image" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('tex_image_seq'::regclass)]]></defo>
			</column>
			<column name="tex_image_uri" type="varchar" length="4000" decimal="0" jt="12" />
			<column name="tex_image_data" type="bytea" decimal="0" jt="-2" />
			<column name="tex_mime_type" type="varchar" length="256" decimal="0" jt="12" />
			<column name="tex_mime_type_codespace" type="varchar" length="4000" decimal="0" jt="12" />
			<index name="tex_image_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="textureparam" >
			<column name="surface_geometry_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="is_texture_parametrization" type="numeric" jt="2" />
			<column name="world_to_texture" type="varchar" length="1000" decimal="0" jt="12" />
			<column name="texture_coordinates" type="geometry" decimal="0" jt="1111" />
			<column name="surface_data_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="textureparam_pk" unique="PRIMARY_KEY" >
				<column name="surface_geometry_id" />
				<column name="surface_data_id" />
			</index>
			<index name="texparam_geom_fkx" unique="NORMAL" >
				<column name="surface_geometry_id" />
			</index>
			<index name="texparam_surface_data_fkx" unique="NORMAL" >
				<column name="surface_data_id" />
			</index>
			<fk name="texparam_surface_data_fk" to_schema="citydb" to_table="surface_data" delete_action="cascade" update_action="cascade" >
				<fk_column name="surface_data_id" pk="id" />
			</fk>
			<fk name="texparam_geom_fk" to_schema="citydb" to_table="surface_geometry" delete_action="cascade" update_action="cascade" >
				<fk_column name="surface_geometry_id" pk="id" />
			</fk>
		</table>
		<materialized_view name="address" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT (row_number() OVER (ORDER BY ftr.id))::integer AS id,
    ftr.gmlid,
    ftr.gmlid_namespace AS gmlid_codespace,
    pro_street.val_string AS street,
    pro_house_number.val_string AS house_number,
    pro_po_box.val_string AS po_box,
    pro_zip_code.val_string AS zip_code,
    pro_city.val_string AS city,
    pro_state.val_string AS state,
    pro_country.val_string AS country,
    pro_multi_point.val_geometry AS multi_point,
    pro_xml.val_xml AS xal_source
   FROM (((((((((feature ftr
     LEFT JOIN property pro_street ON (((pro_street.feature_id = ftr.id) AND ((pro_street.namespace)::text = 'xAL'::text) AND ((pro_street.name)::text = 'ThoroughfareName'::text))))
     LEFT JOIN property pro_house_number ON (((pro_house_number.feature_id = ftr.id) AND ((pro_house_number.namespace)::text = 'xAL'::text) AND ((pro_house_number.name)::text = 'ThoroughfareNumber'::text))))
     LEFT JOIN property pro_po_box ON (((pro_po_box.feature_id = ftr.id) AND ((pro_po_box.namespace)::text = 'xAL'::text) AND ((pro_po_box.name)::text = 'PostBoxNumber'::text))))
     LEFT JOIN property pro_zip_code ON (((pro_zip_code.feature_id = ftr.id) AND ((pro_zip_code.namespace)::text = 'xAL'::text) AND ((pro_zip_code.name)::text = 'PostalCodeNumber'::text))))
     LEFT JOIN property pro_city ON (((pro_city.feature_id = ftr.id) AND ((pro_city.namespace)::text = 'xAL'::text) AND ((pro_city.name)::text = 'LocalityName'::text) AND (pro_city.index_number = 1))))
     LEFT JOIN property pro_state ON (((pro_state.feature_id = ftr.id) AND ((pro_state.namespace)::text = 'xAL'::text) AND ((pro_state.name)::text = 'LocalityName'::text) AND (pro_state.index_number = 2))))
     LEFT JOIN property pro_country ON (((pro_country.feature_id = ftr.id) AND ((pro_country.namespace)::text = 'xAL'::text) AND ((pro_country.name)::text = 'CountryName'::text))))
     LEFT JOIN property pro_multi_point ON (((pro_multi_point.feature_id = ftr.id) AND ((pro_multi_point.namespace)::text = 'gml'::text) AND ((pro_multi_point.name)::text = 'MultiPoint'::text))))
     LEFT JOIN property pro_xml ON (((pro_xml.feature_id = ftr.id) AND ((pro_xml.namespace)::text = 'core'::text) AND ((pro_xml.name)::text = 'XALAddress'::text))))
  WHERE (ftr.objectclass_id = 58)]]></view_script>
			<column name="id" type="integer" />
			<column name="gmlid" type="varchar" />
			<column name="gmlid_codespace" type="varchar" />
			<column name="street" type="varchar" />
			<column name="house_number" type="varchar" />
			<column name="po_box" type="varchar" />
			<column name="zip_code" type="varchar" />
			<column name="city" type="varchar" />
			<column name="state" type="varchar" />
			<column name="country" type="varchar" />
			<column name="multi_point" type="geometry" />
			<column name="xal_source" type="xml" />
		</materialized_view>
		<materialized_view name="address_to_bridge" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS address_id,
    ftr_rel.to_feature AS bridge_id
   FROM feature_relation ftr_rel
  WHERE (((ftr_rel.namespace)::text = 'core'::text) AND ((ftr_rel.name)::text = 'Address'::text))]]></view_script>
			<column name="address_id" type="bigint" />
			<column name="bridge_id" type="bigint" />
		</materialized_view>
		<materialized_view name="address_to_building" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS address_id,
    ftr_rel.to_feature AS building_id
   FROM feature_relation ftr_rel
  WHERE (((ftr_rel.namespace)::text = 'core'::text) AND ((ftr_rel.name)::text = 'Address'::text))]]></view_script>
			<column name="address_id" type="bigint" />
			<column name="building_id" type="bigint" />
		</materialized_view>
		<materialized_view name="breakline_relief" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_ridge_or_valley_lines.val_geometry AS ridge_or_valley_lines,
    pro_break_lines.val_geometry AS break_lines
   FROM ((feature ftr
     LEFT JOIN property pro_ridge_or_valley_lines ON (((pro_ridge_or_valley_lines.feature_id = ftr.id) AND ((pro_ridge_or_valley_lines.namespace)::text = 'dem'::text) AND ((pro_ridge_or_valley_lines.name)::text = 'ridgeOrValleyLines'::text))))
     LEFT JOIN property pro_break_lines ON (((pro_break_lines.feature_id = ftr.id) AND ((pro_break_lines.namespace)::text = 'dem'::text) AND ((pro_break_lines.name)::text = 'breakLines'::text))))
  WHERE (ftr.objectclass_id = 18)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="ridge_or_valley_lines" type="geometry" />
			<column name="break_lines" type="geometry" />
		</materialized_view>
		<materialized_view name="bridge" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    ftr_rel_bridge_parent.to_feature AS bridge_parent_id,
    ftr.id AS bridge_root_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    (pro_date_cons.val_date)::date AS year_of_construction,
    (pro_date_demo.val_date)::date AS year_of_demolition,
    pro_is_movable.val_double AS is_movable,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod2multicurve.val_geometry AS lod2_multi_curve,
    pro_lod3multicurve.val_geometry AS lod3_multi_curve,
    pro_lod4multicurve.val_geometry AS lod4_multi_curve,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod1solid.val_surface_geometry AS lod1_solid_id,
    pro_lod2solid.val_surface_geometry AS lod2_solid_id,
    pro_lod3solid.val_surface_geometry AS lod3_solid_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM ((((((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'brid'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_date_cons ON (((pro_date_cons.feature_id = ftr.id) AND ((pro_date_cons.name)::text = 'dateOfConstruction'::text))))
     LEFT JOIN property pro_date_demo ON (((pro_date_demo.feature_id = ftr.id) AND ((pro_date_demo.name)::text = 'dateOfDemolition'::text))))
     LEFT JOIN property pro_is_movable ON (((pro_is_movable.feature_id = ftr.id) AND ((pro_is_movable.name)::text = 'isMovable'::text))))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2multicurve ON (((pro_lod2multicurve.feature_id = ftr.id) AND ((pro_lod2multicurve.name)::text = 'lod2MultiCurve'::text))))
     LEFT JOIN property pro_lod3multicurve ON (((pro_lod3multicurve.feature_id = ftr.id) AND ((pro_lod3multicurve.name)::text = 'lod3MultiCurve'::text))))
     LEFT JOIN property pro_lod4multicurve ON (((pro_lod4multicurve.feature_id = ftr.id) AND ((pro_lod4multicurve.name)::text = 'lod4MultiCurve'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod1solid ON (((pro_lod1solid.feature_id = ftr.id) AND ((pro_lod1solid.name)::text = 'lod1Solid'::text))))
     LEFT JOIN property pro_lod2solid ON (((pro_lod2solid.feature_id = ftr.id) AND ((pro_lod2solid.name)::text = 'lod2Solid'::text))))
     LEFT JOIN property pro_lod3solid ON (((pro_lod3solid.feature_id = ftr.id) AND ((pro_lod3solid.name)::text = 'lod3Solid'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
     LEFT JOIN feature_relation ftr_rel_bridge_parent ON (((ftr_rel_bridge_parent.from_feature = ftr.id) AND ((ftr_rel_bridge_parent.namespace)::text = 'brid'::text) AND ((ftr_rel_bridge_parent.name)::text = 'bridgePart'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[62, 63, 64]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="bridge_parent_id" type="bigint" />
			<column name="bridge_root_id" type="bigint" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="year_of_construction" type="date" />
			<column name="year_of_demolition" type="date" />
			<column name="is_movable" type="numeric" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod2_multi_curve" type="geometry" />
			<column name="lod3_multi_curve" type="geometry" />
			<column name="lod4_multi_curve" type="geometry" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod1_solid_id" type="bigint" />
			<column name="lod2_solid_id" type="bigint" />
			<column name="lod3_solid_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="bridge_constr_element" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_bridge_rel.to_feature AS bridge_id,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod1brep.val_surface_geometry AS lod1_brep_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod1othergeom.val_geometry AS lod1_other_geom,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod1implicit.val_implicitgeom_id AS lod1_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod1implicit.val_implicitgeom_refpoint AS lod1_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod1implicit.val_implicitgeom_transform AS lod1_implicit_transformation,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM ((((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'brid'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN feature_relation pro_bridge_rel ON (((pro_bridge_rel.from_feature = ftr.id) AND ((pro_bridge_rel.namespace)::text = 'brid'::text) AND ((pro_bridge_rel.name)::text = 'bridgeConstructiveElement'::text))))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod1brep ON (((pro_lod1brep.feature_id = ftr.id) AND ((pro_lod1brep.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1othergeom ON (((pro_lod1othergeom.feature_id = ftr.id) AND ((pro_lod1othergeom.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1implicit ON (((pro_lod1implicit.feature_id = ftr.id) AND ((pro_lod1implicit.name)::text = 'lod1ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 82)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="bridge_id" type="bigint" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod1_brep_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod1_other_geom" type="geometry" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod1_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod1_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod1_implicit_transformation" type="varchar" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="bridge_furniture" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_room.to_feature AS bridge_room_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'brid'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_room roo ON ((roo.id = ftr_rel.to_feature)))
          WHERE ((roo.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'brid'::text) AND ((ftr_rel.name)::text = 'bridgeFurniture'::text))) pro_room ON ((pro_room.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 80)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="bridge_room_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="bridge_installation" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_bridge.to_feature AS bridge_id,
    pro_room.to_feature AS bridge_room_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM ((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'brid'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_bridge brdg ON ((brdg.id = ftr_rel.to_feature)))
          WHERE ((brdg.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'brid'::text) AND ((ftr_rel.name)::text = 'bridgeInstallation'::text))) pro_bridge ON ((pro_bridge.from_feature = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_room roo ON ((roo.id = ftr_rel.to_feature)))
          WHERE ((roo.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'brid'::text) AND ((ftr_rel.name)::text = 'bridgeInstallation'::text))) pro_room ON ((pro_room.from_feature = ftr.id)))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[65, 66]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="bridge_id" type="bigint" />
			<column name="bridge_room_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="bridge_open_to_them_srf" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS bridge_opening_id,
    ftr_rel.to_feature AS bridge_thematic_surface_id
   FROM ((feature_relation ftr_rel
     JOIN t_bridge_opening brd_opn ON ((brd_opn.id = ftr_rel.from_feature)))
     JOIN t_bridge_thematic_surface brd_thm_srf ON ((brd_thm_srf.id = ftr_rel.to_feature)))
  WHERE (((ftr_rel.namespace)::text = 'con'::text) AND ((ftr_rel.name)::text = 'Boundary'::text))]]></view_script>
			<column name="bridge_opening_id" type="bigint" />
			<column name="bridge_thematic_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="bridge_opening" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_rel_address.to_feature AS address_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((feature ftr
     LEFT JOIN feature_relation pro_rel_address ON (((ftr.id = pro_rel_address.from_feature) AND ((pro_rel_address.namespace)::text = 'core'::text) AND ((pro_rel_address.name)::text = 'Address'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[77, 78, 79]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="address_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="bridge_room" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_bridge.to_feature AS bridge_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM ((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'brid'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'brid'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_bridge brd ON ((brd.id = ftr_rel.to_feature)))
          WHERE (((ftr_rel.namespace)::text = 'brid'::text) AND ((ftr_rel.name)::text = 'bridgeRoom'::text))) pro_bridge ON ((pro_bridge.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = 81)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="bridge_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="bridge_thematic_surface" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT brd_thm_sur.id,
    brd_thm_sur.objectclass_id,
    ftr_brd.id AS bridge_id,
    ftr_brd_roo.id AS bridge_room_id,
    ftr_brd_ins.id AS bridge_installation_id,
    ftr_brd_cns_elm.id AS bridge_constr_element_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id
   FROM ((((((((t_bridge_thematic_surface brd_thm_sur
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM feature_relation ftr_rel
          WHERE (((ftr_rel.namespace)::text = 'core'::text) AND ((ftr_rel.name)::text = 'boundary'::text) AND ((ftr_rel.relationtype)::text = 'association'::text))) pro_bridge ON ((pro_bridge.to_feature = brd_thm_sur.id)))
     LEFT JOIN feature ftr_brd ON (((pro_bridge.from_feature = ftr_brd.id) AND (ftr_brd.objectclass_id = ANY (ARRAY[62, 63, 64])))))
     LEFT JOIN feature ftr_brd_roo ON (((pro_bridge.from_feature = ftr_brd_roo.id) AND (ftr_brd_roo.objectclass_id = 81))))
     LEFT JOIN feature ftr_brd_ins ON (((pro_bridge.from_feature = ftr_brd_ins.id) AND (ftr_brd_ins.objectclass_id = ANY (ARRAY[65, 66])))))
     LEFT JOIN feature ftr_brd_cns_elm ON (((pro_bridge.from_feature = ftr_brd_cns_elm.id) AND (ftr_brd_cns_elm.objectclass_id = 82))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = brd_thm_sur.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = brd_thm_sur.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = brd_thm_sur.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE ((ftr_brd.id IS NOT NULL) OR (ftr_brd_roo.id IS NOT NULL) OR (ftr_brd_ins.id IS NOT NULL) OR (ftr_brd_cns_elm.id IS NOT NULL))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="bridge_id" type="bigint" />
			<column name="bridge_room_id" type="bigint" />
			<column name="bridge_installation_id" type="bigint" />
			<column name="bridge_constr_element_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="building" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    ftr_rel_building_parent.to_feature AS building_parent_id,
    COALESCE(ftr_rel_building_parent.to_feature, ftr.id) AS building_root_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    (pro_date_cons.val_date)::date AS year_of_construction,
    (pro_date_demo.val_date)::date AS year_of_demolition,
    pro_roof_type.val_code AS roof_type,
    pro_roof_type.val_uri AS roof_type_codespace,
    pro_height.val_double AS measured_height,
    pro_height.val_uom AS measured_height_unit,
    (pro_storeys_above_ground.val_int)::numeric AS storeys_above_ground,
    (pro_storeys_below_ground.val_int)::numeric AS storeys_below_ground,
    (pro_storey_heights_above_ground.storey_heights_above_ground)::character varying AS storey_heights_above_ground,
    (pro_storey_heights_above_ground.height_ag_unit)::character varying AS storey_heights_ag_unit,
    (pro_storey_heights_below_ground.storey_heights_below_ground)::character varying AS storey_heights_below_ground,
    pro_storey_heights_below_ground.height_bg_unit AS storey_heights_bg_unit,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod2multicurve.val_geometry AS lod2_multi_curve,
    pro_lod3multicurve.val_geometry AS lod3_multi_curve,
    pro_lod4multicurve.val_geometry AS lod4_multi_curve,
    pro_lod0footprint.val_surface_geometry AS lod0_footprint_id,
    pro_lod0roofprint.val_surface_geometry AS lod0_roofprint_id,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod1solid.val_surface_geometry AS lod1_solid_id,
    pro_lod2solid.val_surface_geometry AS lod2_solid_id,
    pro_lod3solid.val_surface_geometry AS lod3_solid_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM (((((((((((((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'bldg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_date_cons ON (((pro_date_cons.feature_id = ftr.id) AND ((pro_date_cons.name)::text = 'dateOfConstruction'::text))))
     LEFT JOIN property pro_date_demo ON (((pro_date_demo.feature_id = ftr.id) AND ((pro_date_demo.name)::text = 'dateOfDemolition'::text))))
     LEFT JOIN property pro_roof_type ON (((pro_roof_type.feature_id = ftr.id) AND ((pro_roof_type.namespace)::text = 'bldg'::text) AND ((pro_roof_type.name)::text = 'roofType'::text))))
     LEFT JOIN property pro_height ON (((pro_height.feature_id = ftr.id) AND ((pro_height.name)::text = 'height'::text))))
     LEFT JOIN property pro_storeys_above_ground ON (((pro_storeys_above_ground.feature_id = ftr.id) AND ((pro_storeys_above_ground.name)::text = 'storeysAboveGround'::text))))
     LEFT JOIN property pro_storeys_below_ground ON (((pro_storeys_below_ground.feature_id = ftr.id) AND ((pro_storeys_below_ground.name)::text = 'storeysBelowGround'::text))))
     LEFT JOIN ( WITH height_values AS (
                 SELECT (json_array_elements(pro_storey_heights_above_ground_1.val_complex) ->> 'value'::text) AS height_value,
                    split_part((json_array_elements(pro_storey_heights_above_ground_1.val_complex) ->> 'uom'::text), '::'::text, 2) AS height_ag_unit,
                    pro_storey_heights_above_ground_1.feature_id,
                    pro_storey_heights_above_ground_1.namespace,
                    pro_storey_heights_above_ground_1.name,
                    pro_storey_heights_above_ground_1.index_number
                   FROM property pro_storey_heights_above_ground_1
                  WHERE ((pro_storey_heights_above_ground_1.name)::text = 'storeyHeightsAboveGround'::text)
                )
         SELECT string_agg(height_values.height_value, ' '::text) AS storey_heights_above_ground,
            height_values.feature_id,
            height_values.namespace,
            height_values.name,
            height_values.index_number,
            height_values.height_ag_unit
           FROM height_values
          GROUP BY height_values.feature_id, height_values.namespace, height_values.name, height_values.index_number, height_values.height_ag_unit) pro_storey_heights_above_ground ON ((pro_storey_heights_above_ground.feature_id = ftr.id)))
     LEFT JOIN ( WITH height_values AS (
                 SELECT (json_array_elements(pro_storey_heights_below_ground_1.val_complex) ->> 'value'::text) AS height_value,
                    split_part((json_array_elements(pro_storey_heights_below_ground_1.val_complex) ->> 'uom'::text), '::'::text, 2) AS height_bg_unit,
                    pro_storey_heights_below_ground_1.feature_id,
                    pro_storey_heights_below_ground_1.namespace,
                    pro_storey_heights_below_ground_1.name,
                    pro_storey_heights_below_ground_1.index_number
                   FROM property pro_storey_heights_below_ground_1
                  WHERE ((pro_storey_heights_below_ground_1.name)::text = 'storeyHeightsBelowGround'::text)
                )
         SELECT string_agg(height_values.height_value, ' '::text) AS storey_heights_below_ground,
            height_values.feature_id,
            height_values.namespace,
            height_values.name,
            height_values.index_number,
            height_values.height_bg_unit
           FROM height_values
          GROUP BY height_values.feature_id, height_values.namespace, height_values.name, height_values.index_number, height_values.height_bg_unit) pro_storey_heights_below_ground ON ((pro_storey_heights_below_ground.feature_id = ftr.id)))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2multicurve ON (((pro_lod2multicurve.feature_id = ftr.id) AND ((pro_lod2multicurve.name)::text = 'lod2MultiCurve'::text))))
     LEFT JOIN property pro_lod3multicurve ON (((pro_lod3multicurve.feature_id = ftr.id) AND ((pro_lod3multicurve.name)::text = 'lod3MultiCurve'::text))))
     LEFT JOIN property pro_lod4multicurve ON (((pro_lod4multicurve.feature_id = ftr.id) AND ((pro_lod4multicurve.name)::text = 'lod4MultiCurve'::text))))
     LEFT JOIN property pro_lod0footprint ON (((pro_lod0footprint.feature_id = ftr.id) AND ((pro_lod0footprint.name)::text = 'GroundSurface'::text))))
     LEFT JOIN property pro_lod0roofprint ON (((pro_lod0roofprint.feature_id = ftr.id) AND ((pro_lod0roofprint.name)::text = 'RoofSurface'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod1solid ON (((pro_lod1solid.feature_id = ftr.id) AND ((pro_lod1solid.name)::text = 'lod1Solid'::text))))
     LEFT JOIN property pro_lod2solid ON (((pro_lod2solid.feature_id = ftr.id) AND ((pro_lod2solid.name)::text = 'lod2Solid'::text))))
     LEFT JOIN property pro_lod3solid ON (((pro_lod3solid.feature_id = ftr.id) AND ((pro_lod3solid.name)::text = 'lod3Solid'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
     LEFT JOIN feature_relation ftr_rel_building_parent ON (((ftr_rel_building_parent.from_feature = ftr.id) AND ((ftr_rel_building_parent.namespace)::text = 'bldg'::text) AND ((ftr_rel_building_parent.name)::text = 'buildingPart'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[24, 25, 26]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="building_parent_id" type="bigint" />
			<column name="building_root_id" type="bigint" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="year_of_construction" type="date" />
			<column name="year_of_demolition" type="date" />
			<column name="roof_type" type="varchar" />
			<column name="roof_type_codespace" type="varchar" />
			<column name="measured_height" type="numeric" />
			<column name="measured_height_unit" type="varchar" />
			<column name="storeys_above_ground" type="numeric" />
			<column name="storeys_below_ground" type="numeric" />
			<column name="storey_heights_above_ground" type="varchar" />
			<column name="storey_heights_ag_unit" type="varchar" />
			<column name="storey_heights_below_ground" type="varchar" />
			<column name="storey_heights_bg_unit" type="text" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod2_multi_curve" type="geometry" />
			<column name="lod3_multi_curve" type="geometry" />
			<column name="lod4_multi_curve" type="geometry" />
			<column name="lod0_footprint_id" type="bigint" />
			<column name="lod0_roofprint_id" type="bigint" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod1_solid_id" type="bigint" />
			<column name="lod2_solid_id" type="bigint" />
			<column name="lod3_solid_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="building_furniture" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_room.to_feature AS room_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'bldg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_room roo ON ((roo.id = ftr_rel.to_feature)))
          WHERE ((roo.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'bldg'::text) AND ((ftr_rel.name)::text = 'buildingFurniture'::text))) pro_room ON ((pro_room.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 40)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="room_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="building_installation" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_building.to_feature AS building_id,
    pro_room.to_feature AS room_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM ((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'bldg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_building bld ON ((bld.id = ftr_rel.to_feature)))
          WHERE ((bld.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'bldg'::text) AND ((ftr_rel.name)::text = 'buildingInstallation'::text))) pro_building ON ((pro_building.from_feature = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_room roo ON ((roo.id = ftr_rel.to_feature)))
          WHERE ((roo.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'bldg'::text) AND ((ftr_rel.name)::text = 'buildingInstallation'::text))) pro_room ON ((pro_room.from_feature = ftr.id)))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[27, 28]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="building_id" type="bigint" />
			<column name="room_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="city_furniture" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod1brep.val_surface_geometry AS lod1_brep_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod1othergeom.val_geometry AS lod1_other_geom,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod1implicit.val_implicitgeom_id AS lod1_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod1implicit.val_implicitgeom_refpoint AS lod1_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod1implicit.val_implicitgeom_transform AS lod1_implicit_transformation,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'frn'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'frn'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'frn'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod1brep ON (((pro_lod1brep.feature_id = ftr.id) AND ((pro_lod1brep.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1othergeom ON (((pro_lod1othergeom.feature_id = ftr.id) AND ((pro_lod1othergeom.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1implicit ON (((pro_lod1implicit.feature_id = ftr.id) AND ((pro_lod1implicit.name)::text = 'lod1ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 21)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod1_brep_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod1_other_geom" type="geometry" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod1_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod1_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod1_implicit_transformation" type="varchar" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="cityobject" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    ftr.gmlid,
    ftr.gmlid_namespace AS gmlid_codespace,
    ftr.identifier AS name,
    ftr.identifier_namespace AS name_codespace,
    pro_desc.val_string AS description,
    ftr.envelope,
    ftr.creation_date,
    ftr.termination_date,
    pro_relative_to_terrain.val_string AS relative_to_terrain,
    pro_relative_to_water.val_string AS relative_to_water,
    ftr.last_modification_date,
    ftr.updating_person,
    ftr.reason_for_update,
    ftr.lineage,
    ftr.xml_source
   FROM (((feature ftr
     LEFT JOIN property pro_desc ON (((pro_desc.feature_id = ftr.id) AND ((pro_desc.name)::text = 'description'::text))))
     LEFT JOIN property pro_relative_to_terrain ON (((pro_relative_to_terrain.feature_id = ftr.id) AND ((pro_relative_to_terrain.name)::text = 'relativeToTerrain'::text))))
     LEFT JOIN property pro_relative_to_water ON (((pro_relative_to_water.feature_id = ftr.id) AND ((pro_relative_to_water.name)::text = 'relativeToWater'::text))))
  WHERE (ftr.objectclass_id <> 58)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="gmlid" type="varchar" />
			<column name="gmlid_codespace" type="varchar" />
			<column name="name" type="varchar" />
			<column name="name_codespace" type="varchar" />
			<column name="description" type="varchar" />
			<column name="envelope" type="geometry" />
			<column name="creation_date" type="timestamptz" />
			<column name="termination_date" type="timestamptz" />
			<column name="relative_to_terrain" type="varchar" />
			<column name="relative_to_water" type="varchar" />
			<column name="last_modification_date" type="timestamptz" />
			<column name="updating_person" type="varchar" />
			<column name="reason_for_update" type="varchar" />
			<column name="lineage" type="varchar" />
			<column name="xml_source" type="text" />
		</materialized_view>
		<materialized_view name="cityobject_genericattrib" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT pro.id,
    pro.parent_id AS parent_genattrib_id,
    pro.root_id AS root_genattrib_id,
    pro.name AS attrname,
        CASE
            WHEN (pro.data_valtype = 12) THEN 7
            WHEN (pro.data_valtype = 2) THEN 1
            WHEN (pro.data_valtype = 0) THEN 2
            WHEN (pro.data_valtype = 1) THEN 3
            WHEN (pro.data_valtype = 4) THEN 4
            WHEN (pro.data_valtype = 3) THEN 5
            WHEN (pro.data_valtype = 13) THEN 6
            ELSE NULL::integer
        END AS datatype,
    pro.val_string AS strval,
    pro.val_int AS intval,
    pro.val_double AS realval,
    pro.val_uri AS urival,
    pro.val_date AS dateval,
    pro.val_uom AS unit,
    pro.val_code AS genattribset_codespace,
    NULL::bytea AS blobval,
    pro.val_geometry AS geomval,
    pro.val_surface_geometry AS surface_geometry_id,
    pro.feature_id AS cityobject_id
   FROM property pro
  WHERE (((pro.namespace)::text = 'gen'::text) AND ((pro.datatype)::text = ANY ((ARRAY['gen:genericAttributeSet'::character varying, 'gen:stringAttribute'::character varying, 'gen:intAttribute'::character varying, 'gen:doubleAttribute'::character varying, 'gen:uriAttribute'::character varying, 'gen:dateAttribute'::character varying, 'gen:measureAttribute'::character varying])::text[])))]]></view_script>
			<column name="id" type="bigint" />
			<column name="parent_genattrib_id" type="bigint" />
			<column name="root_genattrib_id" type="bigint" />
			<column name="attrname" type="varchar" />
			<column name="datatype" type="integer" />
			<column name="strval" type="varchar" />
			<column name="intval" type="bigint" />
			<column name="realval" type="numeric" />
			<column name="urival" type="varchar" />
			<column name="dateval" type="timestamptz" />
			<column name="unit" type="varchar" />
			<column name="genattribset_codespace" type="varchar" />
			<column name="blobval" type="bytea" />
			<column name="geomval" type="geometry" />
			<column name="surface_geometry_id" type="bigint" />
			<column name="cityobject_id" type="bigint" />
		</materialized_view>
		<materialized_view name="cityobjectgroup" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_brep.val_surface_geometry AS brep_id,
    pro_othergeom.val_geometry AS other_geom,
    pro_parent_cityobject.to_feature AS parent_cityobject_id
   FROM ((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'grp'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'grp'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'grp'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_brep ON (((pro_brep.feature_id = ftr.id) AND ((pro_brep.name)::text = 'MultiSurface'::text) AND (pro_brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_othergeom ON (((pro_othergeom.feature_id = ftr.id) AND ((pro_othergeom.name)::text = 'MultiSurface'::text) AND (pro_othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN feature_relation pro_parent_cityobject ON (((pro_parent_cityobject.from_feature = ftr.id) AND ((pro_parent_cityobject.namespace)::text = 'core'::text) AND ((pro_parent_cityobject.name)::text = 'parent'::text))))
  WHERE (ftr.objectclass_id = 23)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="brep_id" type="bigint" />
			<column name="other_geom" type="geometry" />
			<column name="parent_cityobject_id" type="bigint" />
		</materialized_view>
		<materialized_view name="external_reference" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT row_number() OVER () AS id,
    pro.val_string AS infosys,
    pro.val_uom AS name,
    pro.val_uri AS uri,
    pro.feature_id AS cityobject_id
   FROM (property pro
     JOIN feature ftr ON ((ftr.id = pro.feature_id)))
  WHERE (((pro.namespace)::text = 'core'::text) AND ((pro.name)::text = 'ExternalReference'::text))]]></view_script>
			<column name="id" type="bigint" />
			<column name="infosys" type="varchar" />
			<column name="name" type="varchar" />
			<column name="uri" type="varchar" />
			<column name="cityobject_id" type="bigint" />
		</materialized_view>
		<materialized_view name="generalization" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS cityobject_id,
    ftr_rel.to_feature AS generalizes_to_id
   FROM (feature_relation ftr_rel
     JOIN feature ftr ON ((ftr.id = ftr_rel.to_feature)))
  WHERE (((ftr_rel.namespace)::text = 'core'::text) AND ((ftr_rel.name)::text = 'generalizesTo'::text))]]></view_script>
			<column name="cityobject_id" type="bigint" />
			<column name="generalizes_to_id" type="bigint" />
		</materialized_view>
		<materialized_view name="generic_cityobject" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_lod0terrainintersection.val_geometry AS lod0_terrain_intersection,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod0brep.val_surface_geometry AS lod0_brep_id,
    pro_lod1brep.val_surface_geometry AS lod1_brep_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod0othergeom.val_geometry AS lod0_other_geom,
    pro_lod1othergeom.val_geometry AS lod1_other_geom,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod0implicit.val_implicitgeom_id AS lod0_implicit_rep_id,
    pro_lod1implicit.val_implicitgeom_id AS lod1_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod0implicit.val_implicitgeom_refpoint AS lod0_implicit_ref_point,
    pro_lod1implicit.val_implicitgeom_refpoint AS lod1_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod0implicit.val_implicitgeom_transform AS lod0_implicit_transformation,
    pro_lod1implicit.val_implicitgeom_transform AS lod1_implicit_transformation,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'gen'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'gen'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'gen'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_lod0terrainintersection ON (((pro_lod0terrainintersection.feature_id = ftr.id) AND ((pro_lod0terrainintersection.name)::text = 'lod0TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod0brep ON (((pro_lod0brep.feature_id = ftr.id) AND ((pro_lod0brep.name)::text = 'lod0MultiSurface'::text) AND (pro_lod0brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1brep ON (((pro_lod1brep.feature_id = ftr.id) AND ((pro_lod1brep.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod0othergeom ON (((pro_lod0othergeom.feature_id = ftr.id) AND ((pro_lod0othergeom.name)::text = 'lod0MultiSurface'::text) AND (pro_lod0othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1othergeom ON (((pro_lod1othergeom.feature_id = ftr.id) AND ((pro_lod1othergeom.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod0implicit ON (((pro_lod0implicit.feature_id = ftr.id) AND ((pro_lod0implicit.name)::text = 'lod0ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod1implicit ON (((pro_lod1implicit.feature_id = ftr.id) AND ((pro_lod1implicit.name)::text = 'lod1ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 5)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="lod0_terrain_intersection" type="geometry" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod0_brep_id" type="bigint" />
			<column name="lod1_brep_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod0_other_geom" type="geometry" />
			<column name="lod1_other_geom" type="geometry" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod0_implicit_rep_id" type="bigint" />
			<column name="lod1_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod0_implicit_ref_point" type="geometry" />
			<column name="lod1_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod0_implicit_transformation" type="varchar" />
			<column name="lod1_implicit_transformation" type="varchar" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="group_to_cityobject" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS cityobject_id,
    ftr_rel.to_feature AS cityobjectgroup_id,
    ftr_rel.relationtype AS role
   FROM feature_relation ftr_rel
  WHERE (((ftr_rel.namespace)::text = 'grp'::text) AND ((ftr_rel.name)::text = 'groupMember'::text))]]></view_script>
			<column name="cityobject_id" type="bigint" />
			<column name="cityobjectgroup_id" type="bigint" />
			<column name="role" type="varchar" />
		</materialized_view>
		<materialized_view name="land_use" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.url AS class_codespace,
    pro_function.val_code AS function,
    pro_function.url AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.url AS usage_codespace,
    pro_lod0multisurface.val_surface_geometry AS lod0_multi_surface_id,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id
   FROM ((((((((feature ftr
     LEFT JOIN ( SELECT pro.feature_id,
            pro.val_code,
            cl.url
           FROM (property pro
             JOIN codelist cl ON ((pro.val_codelist = cl.id)))
          WHERE ((pro.name)::text = 'class'::text)) pro_class ON ((pro_class.feature_id = ftr.id)))
     LEFT JOIN ( SELECT DISTINCT ON (fun.feature_id) fun.feature_id,
            string_agg((fun.val_code)::text, '--/\--'::text ORDER BY fun.index_number) AS val_code,
            string_agg((fun.url)::text, '--/\--'::text ORDER BY fun.index_number) AS url
           FROM ( SELECT pro.feature_id,
                    pro.val_code,
                    pro.index_number,
                    cl.url
                   FROM (property pro
                     JOIN codelist cl ON ((pro.val_codelist = cl.id)))
                  WHERE ((pro.name)::text = 'function'::text)
                  ORDER BY pro.feature_id, pro.index_number) fun
          GROUP BY fun.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT DISTINCT ON (usag.feature_id) usag.feature_id,
            string_agg((usag.val_code)::text, '--/\--'::text ORDER BY usag.index_number) AS val_code,
            string_agg((usag.url)::text, '--/\--'::text ORDER BY usag.index_number) AS url
           FROM ( SELECT pro.feature_id,
                    pro.val_code,
                    pro.index_number,
                    cl.url
                   FROM (property pro
                     JOIN codelist cl ON ((pro.val_codelist = cl.id)))
                  WHERE ((pro.name)::text = 'usage'::text)
                  ORDER BY pro.feature_id, pro.index_number) usag
          GROUP BY usag.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_lod0multisurface ON (((pro_lod0multisurface.feature_id = ftr.id) AND ((pro_lod0multisurface.name)::text = 'lod0MultiSurface'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE (ftr.objectclass_id = 4)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="lod0_multi_surface_id" type="bigint" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="masspoint_relief" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT pro.feature_id AS id,
    ftr.objectclass_id,
    pro.val_geometry AS relief_points
   FROM (property pro
     JOIN feature ftr ON ((ftr.id = pro.feature_id)))
  WHERE (((pro.namespace)::text = 'dem'::text) AND ((pro.name)::text = 'reliefPoints'::text))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="relief_points" type="geometry" />
		</materialized_view>
		<materialized_view name="opening" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_rel_address.to_feature AS address_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((feature ftr
     LEFT JOIN feature_relation pro_rel_address ON (((ftr.id = pro_rel_address.from_feature) AND ((pro_rel_address.namespace)::text = 'core'::text) AND ((pro_rel_address.name)::text = 'Address'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[37, 38, 39]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="address_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="opening_to_them_surface" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS opening_id,
    ftr_rel.to_feature AS thematic_surface_id
   FROM ((feature_relation ftr_rel
     JOIN t_opening opn ON ((opn.id = ftr_rel.from_feature)))
     JOIN t_thematic_surface thm_srf ON ((thm_srf.id = ftr_rel.to_feature)))
  WHERE (((ftr_rel.namespace)::text = 'con'::text) AND ((ftr_rel.name)::text = 'Boundary'::text))]]></view_script>
			<column name="opening_id" type="bigint" />
			<column name="thematic_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="plant_cover" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_height.val_double AS average_height,
    pro_height.val_uom AS average_height_unit,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod1solid.val_surface_geometry AS lod1_multi_solid_id,
    pro_lod2solid.val_surface_geometry AS lod2_multi_solid_id,
    pro_lod3solid.val_surface_geometry AS lod3_multi_solid_id,
    pro_lod4solid.val_surface_geometry AS lod4_multi_solid_id
   FROM ((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'veg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'veg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'veg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_height ON (((pro_height.feature_id = ftr.id) AND ((pro_height.name)::text = 'height'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod1solid ON (((pro_lod1solid.feature_id = ftr.id) AND ((pro_lod1solid.name)::text = 'lod1Solid'::text))))
     LEFT JOIN property pro_lod2solid ON (((pro_lod2solid.feature_id = ftr.id) AND ((pro_lod2solid.name)::text = 'lod2Solid'::text))))
     LEFT JOIN property pro_lod3solid ON (((pro_lod3solid.feature_id = ftr.id) AND ((pro_lod3solid.name)::text = 'lod3Solid'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = 8)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="average_height" type="numeric" />
			<column name="average_height_unit" type="varchar" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod1_multi_solid_id" type="bigint" />
			<column name="lod2_multi_solid_id" type="bigint" />
			<column name="lod3_multi_solid_id" type="bigint" />
			<column name="lod4_multi_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="raster_relief" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_raster_uri.val_uri AS raster_uri,
    pro_coverage.val_grid_coverage AS coverage_id
   FROM ((feature ftr
     LEFT JOIN property pro_raster_uri ON (((ftr.id = pro_raster_uri.feature_id) AND ((pro_raster_uri.namespace)::text = 'gen'::text) AND ((pro_raster_uri.name)::text = 'uri'::text))))
     LEFT JOIN property pro_coverage ON (((ftr.id = pro_coverage.feature_id) AND ((pro_coverage.namespace)::text = 'dem'::text) AND ((pro_coverage.name)::text = 'grid'::text))))
  WHERE (ftr.objectclass_id = 19)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="raster_uri" type="varchar" />
			<column name="coverage_id" type="bigint" />
		</materialized_view>
		<materialized_view name="relief_component" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_lod.val_int AS lod,
    pro_extent.val_geometry AS extent
   FROM ((feature ftr
     LEFT JOIN property pro_lod ON (((pro_lod.feature_id = ftr.id) AND ((pro_lod.namespace)::text = 'dem'::text) AND ((pro_lod.name)::text = 'lod'::text))))
     LEFT JOIN property pro_extent ON (((pro_extent.feature_id = ftr.id) AND ((pro_extent.namespace)::text = 'dem'::text) AND ((pro_extent.name)::text = 'extent'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[15, 16]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="lod" type="bigint" />
			<column name="extent" type="geometry" />
		</materialized_view>
		<materialized_view name="relief_feat_to_rel_comp" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.to_feature AS relief_component_id,
    ftr_rel.from_feature AS relief_feature_id
   FROM feature_relation ftr_rel
  WHERE (((ftr_rel.namespace)::text = 'dem'::text) AND ((ftr_rel.name)::text = 'reliefComponent'::text))]]></view_script>
			<column name="relief_component_id" type="bigint" />
			<column name="relief_feature_id" type="bigint" />
		</materialized_view>
		<materialized_view name="relief_feature" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_lod.val_int AS lod
   FROM (feature ftr
     LEFT JOIN property pro_lod ON (((pro_lod.feature_id = ftr.id) AND ((pro_lod.namespace)::text = 'dem'::text) AND ((pro_lod.name)::text = 'lod'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[14, 15]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="lod" type="bigint" />
		</materialized_view>
		<materialized_view name="room" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_building.to_feature AS building_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM ((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'bldg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'bldg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_building bui ON ((bui.id = ftr_rel.to_feature)))
          WHERE (((ftr_rel.namespace)::text = 'bldg'::text) AND ((ftr_rel.name)::text = 'buildingRoom'::text))) pro_building ON ((pro_building.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = 41)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="building_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="solitary_vegetat_object" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_species.val_code AS species,
    pro_species.val_uri AS species_codespace,
    pro_height.val_double AS height,
    pro_height.val_uom AS height_unit,
    pro_trunk_diameter.val_double AS trunk_diameter,
    pro_trunk_diameter.val_uom AS trunk_diameter_unit,
    pro_crown_diameter.val_double AS crown_diameter,
    pro_crown_diameter.val_uom AS crown_diameter_unit,
    pro_lod1brep.val_surface_geometry AS lod1_brep_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod1othergeom.val_geometry AS lod1_other_geom,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod1implicit.val_implicitgeom_id AS lod1_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod1implicit.val_implicitgeom_refpoint AS lod1_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod1implicit.val_implicitgeom_transform AS lod1_implicit_transformation,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'veg'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'veg'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'veg'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'veg'::text) AND ((pro.name)::text = 'species'::text))
          GROUP BY pro.feature_id) pro_species ON ((pro_species.feature_id = ftr.id)))
     LEFT JOIN property pro_height ON (((pro_height.feature_id = ftr.id) AND ((pro_height.name)::text = 'height'::text) AND (pro_height.val_double IS NOT NULL))))
     LEFT JOIN property pro_trunk_diameter ON (((pro_trunk_diameter.feature_id = ftr.id) AND ((pro_trunk_diameter.name)::text = 'trunkDiameter'::text) AND (pro_trunk_diameter.val_double IS NOT NULL))))
     LEFT JOIN property pro_crown_diameter ON (((pro_crown_diameter.feature_id = ftr.id) AND ((pro_crown_diameter.name)::text = 'crownDiameter'::text) AND (pro_crown_diameter.val_double IS NOT NULL))))
     LEFT JOIN property pro_lod1brep ON (((pro_lod1brep.feature_id = ftr.id) AND ((pro_lod1brep.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1othergeom ON (((pro_lod1othergeom.feature_id = ftr.id) AND ((pro_lod1othergeom.name)::text = 'lod1MultiSurface'::text) AND (pro_lod1othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod1implicit ON (((pro_lod1implicit.feature_id = ftr.id) AND ((pro_lod1implicit.name)::text = 'lod1ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 7)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="species" type="text" />
			<column name="species_codespace" type="text" />
			<column name="height" type="numeric" />
			<column name="height_unit" type="varchar" />
			<column name="trunk_diameter" type="numeric" />
			<column name="trunk_diameter_unit" type="varchar" />
			<column name="crown_diameter" type="numeric" />
			<column name="crown_diameter_unit" type="varchar" />
			<column name="lod1_brep_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod1_other_geom" type="geometry" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod1_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod1_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod1_implicit_transformation" type="varchar" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="thematic_surface" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT DISTINCT ftr.id,
    ftr.objectclass_id,
    ftr_bld.id AS building_id,
    ftr_roo.id AS room_id,
    ftr_bld_ins.id AS building_installation_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id
   FROM (((((((feature ftr
     JOIN feature_relation ftr_rel_bnd ON (((ftr.id = ftr_rel_bnd.to_feature) AND ((ftr_rel_bnd.namespace)::text = 'core'::text) AND ((ftr_rel_bnd.name)::text = 'boundary'::text) AND ((ftr_rel_bnd.relationtype)::text = 'association'::text))))
     LEFT JOIN feature ftr_bld ON (((ftr_rel_bnd.from_feature = ftr_bld.id) AND (ftr_bld.objectclass_id = ANY (ARRAY[24, 25, 26])))))
     LEFT JOIN feature ftr_bld_ins ON (((ftr_rel_bnd.from_feature = ftr_bld_ins.id) AND (ftr_bld_ins.objectclass_id = ANY (ARRAY[27, 28])))))
     LEFT JOIN feature ftr_roo ON (((ftr_rel_bnd.from_feature = ftr_roo.id) AND (ftr_roo.objectclass_id = 41))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE ((ftr_bld.id IS NOT NULL) OR (ftr_roo.id IS NOT NULL) OR (ftr_bld_ins.id IS NOT NULL))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="building_id" type="bigint" />
			<column name="room_id" type="bigint" />
			<column name="building_installation_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="tin_relief" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_max_length.val_double AS max_length,
    pro_max_length.val_uom AS max_length_unit,
    pro_stop_lines.val_geometry AS stop_lines,
    pro_break_lines.val_geometry AS break_lines,
    pro_control_points.val_geometry AS control_points,
    pro_surface.val_surface_geometry AS surface_geometry_id
   FROM (((((feature ftr
     LEFT JOIN property pro_max_length ON (((pro_max_length.feature_id = ftr.id) AND ((pro_max_length.namespace)::text = 'dem'::text) AND ((pro_max_length.name)::text = 'maxLength'::text))))
     LEFT JOIN property pro_stop_lines ON (((pro_stop_lines.feature_id = ftr.id) AND ((pro_stop_lines.namespace)::text = 'dem'::text) AND ((pro_stop_lines.name)::text = 'stopLines'::text))))
     LEFT JOIN property pro_break_lines ON (((pro_break_lines.feature_id = ftr.id) AND ((pro_break_lines.namespace)::text = 'dem'::text) AND ((pro_break_lines.name)::text = 'breakLines'::text))))
     LEFT JOIN property pro_control_points ON (((pro_control_points.feature_id = ftr.id) AND ((pro_control_points.namespace)::text = 'dem'::text) AND ((pro_control_points.name)::text = 'controlPoint'::text))))
     LEFT JOIN property pro_surface ON (((pro_surface.feature_id = ftr.id) AND ((pro_surface.namespace)::text = 'dem'::text) AND ((pro_surface.name)::text = 'tin'::text))))
  WHERE (ftr.objectclass_id = 16)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="max_length" type="numeric" />
			<column name="max_length_unit" type="varchar" />
			<column name="stop_lines" type="geometry" />
			<column name="break_lines" type="geometry" />
			<column name="control_points" type="geometry" />
			<column name="surface_geometry_id" type="bigint" />
		</materialized_view>
		<materialized_view name="traffic_area" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_surface_material.val_code AS surface_material,
    pro_surface_material.val_uri AS surface_material_codespace,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    ftr_rel_transportation_complex.to_feature AS transportation_complex_id
   FROM ((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tran'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tran'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tran'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_surface_material ON (((pro_surface_material.feature_id = ftr.id) AND ((pro_surface_material.namespace)::text = 'tran'::text) AND ((pro_surface_material.name)::text = 'surfaceMaterial'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN feature_relation ftr_rel_transportation_complex ON (((ftr.id = ftr_rel_transportation_complex.from_feature) AND ((ftr_rel_transportation_complex.namespace)::text = 'tran'::text) AND ((ftr_rel_transportation_complex.name)::text = 'trafficSpace'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[47, 48]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="surface_material" type="varchar" />
			<column name="surface_material_codespace" type="varchar" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="transportation_complex_id" type="bigint" />
		</materialized_view>
		<materialized_view name="transportation_complex" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_lod0_network.val_geometry AS lod0_network,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id
   FROM ((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tran'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tran'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tran'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_lod0_network ON (((pro_lod0_network.feature_id = ftr.id) AND ((pro_lod0_network.namespace)::text = 'tran'::text) AND ((pro_lod0_network.name)::text = 'lod0Network'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[42, 43, 44, 45, 46]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="lod0_network" type="geometry" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="tunnel" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    ftr_rel_tunnel_parent.to_feature AS tunnel_parent_id,
    ftr.id AS tunnel_root_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    (pro_date_cons.val_date)::date AS year_of_construction,
    (pro_date_demo.val_date)::date AS year_of_demolition,
    pro_lod1terrainintersection.val_geometry AS lod1_terrain_intersection,
    pro_lod2terrainintersection.val_geometry AS lod2_terrain_intersection,
    pro_lod3terrainintersection.val_geometry AS lod3_terrain_intersection,
    pro_lod4terrainintersection.val_geometry AS lod4_terrain_intersection,
    pro_lod2multicurve.val_geometry AS lod2_multi_curve,
    pro_lod3multicurve.val_geometry AS lod3_multi_curve,
    pro_lod4multicurve.val_geometry AS lod4_multi_curve,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod1solid.val_surface_geometry AS lod1_solid_id,
    pro_lod2solid.val_surface_geometry AS lod2_solid_id,
    pro_lod3solid.val_surface_geometry AS lod3_solid_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM (((((((((((((((((((((feature ftr
     LEFT JOIN feature_relation ftr_rel_tunnel_parent ON (((ftr_rel_tunnel_parent.from_feature = ftr.id) AND ((ftr_rel_tunnel_parent.namespace)::text = 'tun'::text) AND ((ftr_rel_tunnel_parent.name)::text = 'tunnelPart'::text))))
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tun'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_date_cons ON (((pro_date_cons.feature_id = ftr.id) AND ((pro_date_cons.name)::text = 'dateOfConstruction'::text))))
     LEFT JOIN property pro_date_demo ON (((pro_date_demo.feature_id = ftr.id) AND ((pro_date_demo.name)::text = 'dateOfDemolition'::text))))
     LEFT JOIN property pro_lod1terrainintersection ON (((pro_lod1terrainintersection.feature_id = ftr.id) AND ((pro_lod1terrainintersection.name)::text = 'lod1TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2terrainintersection ON (((pro_lod2terrainintersection.feature_id = ftr.id) AND ((pro_lod2terrainintersection.name)::text = 'lod2TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod3terrainintersection ON (((pro_lod3terrainintersection.feature_id = ftr.id) AND ((pro_lod3terrainintersection.name)::text = 'lod3TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod4terrainintersection ON (((pro_lod4terrainintersection.feature_id = ftr.id) AND ((pro_lod4terrainintersection.name)::text = 'lod4TerrainIntersectionCurve'::text))))
     LEFT JOIN property pro_lod2multicurve ON (((pro_lod2multicurve.feature_id = ftr.id) AND ((pro_lod2multicurve.name)::text = 'lod2MultiCurve'::text))))
     LEFT JOIN property pro_lod3multicurve ON (((pro_lod3multicurve.feature_id = ftr.id) AND ((pro_lod3multicurve.name)::text = 'lod3MultiCurve'::text))))
     LEFT JOIN property pro_lod4multicurve ON (((pro_lod4multicurve.feature_id = ftr.id) AND ((pro_lod4multicurve.name)::text = 'lod4MultiCurve'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod1solid ON (((pro_lod1solid.feature_id = ftr.id) AND ((pro_lod1solid.name)::text = 'lod1Solid'::text))))
     LEFT JOIN property pro_lod2solid ON (((pro_lod2solid.feature_id = ftr.id) AND ((pro_lod2solid.name)::text = 'lod2Solid'::text))))
     LEFT JOIN property pro_lod3solid ON (((pro_lod3solid.feature_id = ftr.id) AND ((pro_lod3solid.name)::text = 'lod3Solid'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[83, 84, 85]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="tunnel_parent_id" type="bigint" />
			<column name="tunnel_root_id" type="bigint" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="year_of_construction" type="date" />
			<column name="year_of_demolition" type="date" />
			<column name="lod1_terrain_intersection" type="geometry" />
			<column name="lod2_terrain_intersection" type="geometry" />
			<column name="lod3_terrain_intersection" type="geometry" />
			<column name="lod4_terrain_intersection" type="geometry" />
			<column name="lod2_multi_curve" type="geometry" />
			<column name="lod3_multi_curve" type="geometry" />
			<column name="lod4_multi_curve" type="geometry" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod1_solid_id" type="bigint" />
			<column name="lod2_solid_id" type="bigint" />
			<column name="lod3_solid_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="tunnel_furniture" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_hollow_space.to_feature AS tunnel_hollow_space_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM (((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tun'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_tunnel_hollow_space hll_spc ON ((hll_spc.id = ftr_rel.to_feature)))
          WHERE ((hll_spc.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'tun'::text) AND ((ftr_rel.name)::text = 'tunnelFurniture'::text))) pro_hollow_space ON ((pro_hollow_space.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = 101)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="tunnel_hollow_space_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="tunnel_hollow_space" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_tunnel.to_feature AS tunnel_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM ((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tun'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_tunnel tnn ON ((tnn.id = ftr_rel.to_feature)))
          WHERE (((ftr_rel.namespace)::text = 'tun'::text) AND ((ftr_rel.name)::text = 'hollowSpace'::text))) pro_tunnel ON ((pro_tunnel.from_feature = ftr.id)))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = 102)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="tunnel_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="tunnel_installation" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_tunnel.to_feature AS tunnel_id,
    pro_hollow_space.to_feature AS tunnel_hollow_space_id,
    pro_lod2brep.val_surface_geometry AS lod2_brep_id,
    pro_lod3brep.val_surface_geometry AS lod3_brep_id,
    pro_lod4brep.val_surface_geometry AS lod4_brep_id,
    pro_lod2othergeom.val_geometry AS lod2_other_geom,
    pro_lod3othergeom.val_geometry AS lod3_other_geom,
    pro_lod4othergeom.val_geometry AS lod4_other_geom,
    pro_lod2implicit.val_implicitgeom_id AS lod2_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod2implicit.val_implicitgeom_refpoint AS lod2_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod2implicit.val_implicitgeom_transform AS lod2_implicit_transformation,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM ((((((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'tun'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'tun'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_tunnel tnn ON ((tnn.id = ftr_rel.to_feature)))
          WHERE ((tnn.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'tun'::text) AND ((ftr_rel.name)::text = 'tunnelInstallation'::text))) pro_tunnel ON ((pro_tunnel.from_feature = ftr.id)))
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM (feature_relation ftr_rel
             JOIN t_tunnel_hollow_space roo ON ((roo.id = ftr_rel.to_feature)))
          WHERE ((roo.id IS NOT NULL) AND ((ftr_rel.namespace)::text = 'tun'::text) AND ((ftr_rel.name)::text = 'tunnelInstallation'::text))) pro_hollow_space ON ((pro_hollow_space.from_feature = ftr.id)))
     LEFT JOIN property pro_lod2brep ON (((pro_lod2brep.feature_id = ftr.id) AND ((pro_lod2brep.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3brep ON (((pro_lod3brep.feature_id = ftr.id) AND ((pro_lod3brep.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4brep ON (((pro_lod4brep.feature_id = ftr.id) AND ((pro_lod4brep.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4brep.val_surface_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2othergeom ON (((pro_lod2othergeom.feature_id = ftr.id) AND ((pro_lod2othergeom.name)::text = 'lod2MultiSurface'::text) AND (pro_lod2othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod3othergeom ON (((pro_lod3othergeom.feature_id = ftr.id) AND ((pro_lod3othergeom.name)::text = 'lod3MultiSurface'::text) AND (pro_lod3othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod4othergeom ON (((pro_lod4othergeom.feature_id = ftr.id) AND ((pro_lod4othergeom.name)::text = 'lod4MultiSurface'::text) AND (pro_lod4othergeom.val_geometry IS NOT NULL))))
     LEFT JOIN property pro_lod2implicit ON (((pro_lod2implicit.feature_id = ftr.id) AND ((pro_lod2implicit.name)::text = 'lod2ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[86, 87]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="tunnel_id" type="bigint" />
			<column name="tunnel_hollow_space_id" type="bigint" />
			<column name="lod2_brep_id" type="bigint" />
			<column name="lod3_brep_id" type="bigint" />
			<column name="lod4_brep_id" type="bigint" />
			<column name="lod2_other_geom" type="geometry" />
			<column name="lod3_other_geom" type="geometry" />
			<column name="lod4_other_geom" type="geometry" />
			<column name="lod2_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod2_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod2_implicit_transformation" type="varchar" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="tunnel_open_to_them_srf" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS tunnel_opening_id,
    ftr_rel.to_feature AS tunnel_thematic_surface_id
   FROM ((feature_relation ftr_rel
     JOIN t_tunnel_opening tun_opn ON ((tun_opn.id = ftr_rel.from_feature)))
     JOIN t_tunnel_thematic_surface tun_thm_srf ON ((tun_thm_srf.id = ftr_rel.to_feature)))
  WHERE (((ftr_rel.namespace)::text = 'con'::text) AND ((ftr_rel.name)::text = 'Boundary'::text))]]></view_script>
			<column name="tunnel_opening_id" type="bigint" />
			<column name="tunnel_thematic_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="tunnel_opening" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id,
    pro_lod3implicit.val_implicitgeom_id AS lod3_implicit_rep_id,
    pro_lod4implicit.val_implicitgeom_id AS lod4_implicit_rep_id,
    pro_lod3implicit.val_implicitgeom_refpoint AS lod3_implicit_ref_point,
    pro_lod4implicit.val_implicitgeom_refpoint AS lod4_implicit_ref_point,
    pro_lod3implicit.val_implicitgeom_transform AS lod3_implicit_transformation,
    pro_lod4implicit.val_implicitgeom_transform AS lod4_implicit_transformation
   FROM ((((feature ftr
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
     LEFT JOIN property pro_lod3implicit ON (((pro_lod3implicit.feature_id = ftr.id) AND ((pro_lod3implicit.name)::text = 'lod3ImplicitGeometry'::text))))
     LEFT JOIN property pro_lod4implicit ON (((pro_lod4implicit.feature_id = ftr.id) AND ((pro_lod4implicit.name)::text = 'lod4ImplicitGeometry'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[98, 99, 100]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
			<column name="lod3_implicit_rep_id" type="bigint" />
			<column name="lod4_implicit_rep_id" type="bigint" />
			<column name="lod3_implicit_ref_point" type="geometry" />
			<column name="lod4_implicit_ref_point" type="geometry" />
			<column name="lod3_implicit_transformation" type="varchar" />
			<column name="lod4_implicit_transformation" type="varchar" />
		</materialized_view>
		<materialized_view name="tunnel_thematic_surface" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT tnn_thm_srf.id,
    tnn_thm_srf.objectclass_id,
    ftr_tnn.id AS tunnel_id,
    ftr_tnn_hll_spc.id AS tunnel_hollow_space_id,
    ftr_tnn_ins.id AS tunnel_installation_id,
    pro_lod2multisurface.val_surface_geometry AS lod2_multi_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_multi_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_multi_surface_id
   FROM (((((((t_tunnel_thematic_surface tnn_thm_srf
     LEFT JOIN ( SELECT ftr_rel.from_feature,
            ftr_rel.to_feature
           FROM feature_relation ftr_rel
          WHERE (((ftr_rel.namespace)::text = 'core'::text) AND ((ftr_rel.name)::text = 'boundary'::text) AND ((ftr_rel.relationtype)::text = 'association'::text))) pro_tunnel ON ((pro_tunnel.to_feature = tnn_thm_srf.id)))
     LEFT JOIN feature ftr_tnn ON (((pro_tunnel.from_feature = ftr_tnn.id) AND (ftr_tnn.objectclass_id = ANY (ARRAY[83, 84, 85])))))
     LEFT JOIN feature ftr_tnn_hll_spc ON (((pro_tunnel.from_feature = ftr_tnn_hll_spc.id) AND (ftr_tnn_hll_spc.objectclass_id = 102))))
     LEFT JOIN feature ftr_tnn_ins ON (((pro_tunnel.from_feature = ftr_tnn_ins.id) AND (ftr_tnn_ins.objectclass_id = ANY (ARRAY[86, 87])))))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = tnn_thm_srf.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = tnn_thm_srf.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = tnn_thm_srf.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE ((ftr_tnn.id IS NOT NULL) OR (ftr_tnn_hll_spc.id IS NOT NULL) OR (ftr_tnn_ins.id IS NOT NULL))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="tunnel_id" type="bigint" />
			<column name="tunnel_hollow_space_id" type="bigint" />
			<column name="tunnel_installation_id" type="bigint" />
			<column name="lod2_multi_surface_id" type="bigint" />
			<column name="lod3_multi_surface_id" type="bigint" />
			<column name="lod4_multi_surface_id" type="bigint" />
		</materialized_view>
		<materialized_view name="waterbod_to_waterbnd_srf" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr_rel.from_feature AS waterboundary_surface_id,
    ftr_rel.to_feature AS waterbody_id
   FROM feature_relation ftr_rel
  WHERE (((ftr_rel.namespace)::text = 'wtr'::text) AND ((ftr_rel.name)::text = 'boundary'::text))]]></view_script>
			<column name="waterboundary_surface_id" type="bigint" />
			<column name="waterbody_id" type="bigint" />
		</materialized_view>
		<materialized_view name="waterbody" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_class.val_code AS class,
    pro_class.val_uri AS class_codespace,
    pro_function.val_code AS function,
    pro_function.val_uri AS function_codespace,
    pro_usage.val_code AS usage,
    pro_usage.val_uri AS usage_codespace,
    pro_lod0multicurve.val_geometry AS lod0_multi_curve,
    pro_lod1multicurve.val_geometry AS lod1_multi_curve,
    pro_lod0multisurface.val_surface_geometry AS lod0_multi_surface_id,
    pro_lod1multisurface.val_surface_geometry AS lod1_multi_surface_id,
    pro_lod1solid.val_surface_geometry AS lod1_solid_id,
    pro_lod2solid.val_surface_geometry AS lod2_solid_id,
    pro_lod3solid.val_surface_geometry AS lod3_solid_id,
    pro_lod4solid.val_surface_geometry AS lod4_solid_id
   FROM (((((((((((feature ftr
     LEFT JOIN property pro_class ON (((pro_class.feature_id = ftr.id) AND ((pro_class.namespace)::text = 'wtr'::text) AND ((pro_class.name)::text = 'class'::text))))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'wtr'::text) AND ((pro.name)::text = 'function'::text))
          GROUP BY pro.feature_id) pro_function ON ((pro_function.feature_id = ftr.id)))
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'wtr'::text) AND ((pro.name)::text = 'usage'::text))
          GROUP BY pro.feature_id) pro_usage ON ((pro_usage.feature_id = ftr.id)))
     LEFT JOIN property pro_lod0multicurve ON (((pro_lod0multicurve.feature_id = ftr.id) AND ((pro_lod0multicurve.name)::text = 'lod0MultiCurve'::text))))
     LEFT JOIN property pro_lod1multicurve ON (((pro_lod1multicurve.feature_id = ftr.id) AND ((pro_lod1multicurve.name)::text = 'lod1MultiCurve'::text))))
     LEFT JOIN property pro_lod0multisurface ON (((pro_lod0multisurface.feature_id = ftr.id) AND ((pro_lod0multisurface.name)::text = 'lod0MultiSurface'::text))))
     LEFT JOIN property pro_lod1multisurface ON (((pro_lod1multisurface.feature_id = ftr.id) AND ((pro_lod1multisurface.name)::text = 'lod1MultiSurface'::text))))
     LEFT JOIN property pro_lod1solid ON (((pro_lod1solid.feature_id = ftr.id) AND ((pro_lod1solid.name)::text = 'lod1Solid'::text))))
     LEFT JOIN property pro_lod2solid ON (((pro_lod2solid.feature_id = ftr.id) AND ((pro_lod2solid.name)::text = 'lod2Solid'::text))))
     LEFT JOIN property pro_lod3solid ON (((pro_lod3solid.feature_id = ftr.id) AND ((pro_lod3solid.name)::text = 'lod3Solid'::text))))
     LEFT JOIN property pro_lod4solid ON (((pro_lod4solid.feature_id = ftr.id) AND ((pro_lod4solid.name)::text = 'lod4Solid'::text))))
  WHERE (ftr.objectclass_id = 9)]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="class" type="varchar" />
			<column name="class_codespace" type="varchar" />
			<column name="function" type="text" />
			<column name="function_codespace" type="text" />
			<column name="usage" type="text" />
			<column name="usage_codespace" type="text" />
			<column name="lod0_multi_curve" type="geometry" />
			<column name="lod1_multi_curve" type="geometry" />
			<column name="lod0_multi_surface_id" type="bigint" />
			<column name="lod1_multi_surface_id" type="bigint" />
			<column name="lod1_solid_id" type="bigint" />
			<column name="lod2_solid_id" type="bigint" />
			<column name="lod3_solid_id" type="bigint" />
			<column name="lod4_solid_id" type="bigint" />
		</materialized_view>
		<materialized_view name="waterboundary_surface" >
			<view_script><![CDATA[CREATE MATERIALIZED VIEW ${schema}.${name} AS  SELECT ftr.id,
    ftr.objectclass_id,
    pro_waterlevel.val_code AS waterlevel,
    pro_waterlevel.val_uri AS waterlevel_codespace,
    pro_lod2multisurface.val_surface_geometry AS lod2_surface_id,
    pro_lod3multisurface.val_surface_geometry AS lod3_surface_id,
    pro_lod4multisurface.val_surface_geometry AS lod4_surface_id
   FROM ((((feature ftr
     LEFT JOIN ( SELECT pro.feature_id,
            string_agg((pro.val_code)::text, '--/\--'::text ORDER BY pro.index_number) AS val_code,
            string_agg((pro.val_uri)::text, '--/\--'::text ORDER BY pro.index_number) AS val_uri
           FROM property pro
          WHERE (((pro.namespace)::text = 'wtr'::text) AND ((pro.name)::text = 'waterlevel'::text))
          GROUP BY pro.feature_id) pro_waterlevel ON ((pro_waterlevel.feature_id = ftr.id)))
     LEFT JOIN property pro_lod2multisurface ON (((pro_lod2multisurface.feature_id = ftr.id) AND ((pro_lod2multisurface.name)::text = 'lod2MultiSurface'::text))))
     LEFT JOIN property pro_lod3multisurface ON (((pro_lod3multisurface.feature_id = ftr.id) AND ((pro_lod3multisurface.name)::text = 'lod3MultiSurface'::text))))
     LEFT JOIN property pro_lod4multisurface ON (((pro_lod4multisurface.feature_id = ftr.id) AND ((pro_lod4multisurface.name)::text = 'lod4MultiSurface'::text))))
  WHERE (ftr.objectclass_id = ANY (ARRAY[11, 12, 13]))]]></view_script>
			<column name="id" type="bigint" />
			<column name="objectclass_id" type="integer" />
			<column name="waterlevel" type="text" />
			<column name="waterlevel_codespace" type="text" />
			<column name="lod2_surface_id" type="bigint" />
			<column name="lod3_surface_id" type="bigint" />
			<column name="lod4_surface_id" type="bigint" />
		</materialized_view>
	</schema>
	<connector name="PostgreSQL" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-42.3.5.jar" driver_desc="Standard" host="localhost" port="9020" instance="demo20_db" user="demo20" passwd="bGFoYW5h" />
	<layout name="Main Layout" id="Layout-1758" joined_routing="y" show_column_type="y" show_relation="name" >
		<comment><![CDATA[3dcitydb_v5_schema_v004]]></comment>
		<entity schema="citydb" name="ade" color="BEBEF4" x="1888" y="464" />
		<entity schema="citydb" name="aggregation_info" color="BEBEF4" x="1456" y="272" />
		<entity schema="citydb" name="appear_to_surface_data" color="F4DDBE" x="800" y="1024" />
		<entity schema="citydb" name="appearance" color="F4DDBE" x="304" y="704" />
		<entity schema="citydb" name="citymodel" color="F4DDBE" x="784" y="704" />
		<entity schema="citydb" name="cityobject_member" color="F4DDBE" x="1216" y="800" />
		<entity schema="citydb" name="codelist" color="F4DDBE" x="48" y="784" />
		<entity schema="citydb" name="codelist_entry" color="F4DDBE" x="240" y="976" />
		<entity schema="citydb" name="database_srs" color="BED3F4" x="1920" y="880" />
		<entity schema="citydb" name="feature" color="F4DDBE" x="576" y="80" />
		<entity schema="citydb" name="feature_relation" color="F4DDBE" x="1136" y="320" />
		<entity schema="citydb" name="grid_coverage" color="BED3F4" x="2272" y="880" >
			<column name="id" />
			<column name="rasterproperty" />
		</entity>
		<entity schema="citydb" name="implicit_geometry" color="C7F4BE" x="480" y="1424" />
		<entity schema="citydb" name="index_table" color="BED3F4" x="2176" y="1072" />
		<entity schema="citydb" name="objectclass" color="BEBEF4" x="1952" y="128" />
		<entity schema="citydb" name="property" color="F4DDBE" x="48" y="80" >
			<column name="id" />
			<column name="feature_id" />
			<column name="relation_id" />
			<column name="parent_id" />
			<column name="root_id" />
			<column name="namespace" />
			<column name="name" />
			<column name="index_number" />
			<column name="datatype" />
			<column name="data_valtype" />
			<column name="val_int" />
			<column name="val_double" />
			<column name="val_string" />
			<column name="val_date" />
			<column name="val_uri" />
			<column name="val_geometry" />
			<column name="val_surface_geometry" />
			<column name="val_implicitgeom_id" />
			<column name="val_implicitgeom_refpoint" />
			<column name="val_implicitgeom_transform" />
			<column name="val_grid_coverage" />
			<column name="val_appearance" />
			<column name="val_dynamizer" />
			<column name="val_feature" />
			<column name="val_feature_is_xlink" />
			<column name="val_code" />
			<column name="val_codelist" />
			<column name="val_uom" />
			<column name="val_complex" />
			<column name="val_xml" />
		</entity>
		<entity schema="citydb" name="schema" color="BEBEF4" x="2352" y="224" />
		<entity schema="citydb" name="schema_referencing" color="BEBEF4" x="2864" y="192" />
		<entity schema="citydb" name="schema_to_objectclass" color="BEBEF4" x="2592" y="528" />
		<entity schema="citydb" name="surface_data" color="C7F4BE" x="1776" y="1344" />
		<entity schema="citydb" name="surface_geometry" color="C7F4BE" x="1248" y="1328" />
		<entity schema="citydb" name="tex_image" color="C7F4BE" x="2272" y="1312" />
		<entity schema="citydb" name="textureparam" color="C7F4BE" x="992" y="1680" />
		<group name="database_srs" color="ECF0F7" >
			<entity schema="citydb" name="grid_coverage" />
			<entity schema="citydb" name="database_srs" />
			<entity schema="citydb" name="index_table" />
		</group>
		<group name="surface_geometry" color="EEF7EC" >
			<entity schema="citydb" name="implicit_geometry" />
			<entity schema="citydb" name="textureparam" />
			<entity schema="citydb" name="tex_image" />
			<entity schema="citydb" name="surface_geometry" />
			<entity schema="citydb" name="surface_data" />
		</group>
		<group name="objectclass" color="ECECF7" >
			<entity schema="citydb" name="objectclass" />
			<entity schema="citydb" name="ade" />
			<entity schema="citydb" name="schema_to_objectclass" />
			<entity schema="citydb" name="aggregation_info" />
			<entity schema="citydb" name="schema_referencing" />
			<entity schema="citydb" name="schema" />
		</group>
		<group name="property" color="F7F2EC" >
			<entity schema="citydb" name="feature" />
			<entity schema="citydb" name="feature_relation" />
			<entity schema="citydb" name="cityobject_member" />
			<entity schema="citydb" name="citymodel" />
			<entity schema="citydb" name="appearance" />
			<entity schema="citydb" name="appear_to_surface_data" />
			<entity schema="citydb" name="codelist_entry" />
			<entity schema="citydb" name="codelist" />
			<entity schema="citydb" name="property" />
		</group>
	</layout>
	<layout name="~Layout with Sample Tools" id="Layout-1b89" show_column_type="y" show_relation="columns" >
		<entity schema="citydb" name="ade" color="BEBEF4" x="1856" y="352" />
		<entity schema="citydb" name="aggregation_info" color="BEBEF4" x="1472" y="80" />
		<entity schema="citydb" name="appear_to_surface_data" color="F4DDBE" x="464" y="960" />
		<entity schema="citydb" name="appearance" color="F4DDBE" x="464" y="672" />
		<entity schema="citydb" name="citymodel" color="F4DDBE" x="816" y="672" />
		<entity schema="citydb" name="cityobject_member" color="F4DDBE" x="1184" y="672" />
		<entity schema="citydb" name="codelist" color="F4DDBE" x="48" y="672" />
		<entity schema="citydb" name="codelist_entry" color="F4DDBE" x="48" y="880" />
		<entity schema="citydb" name="database_srs" color="BED3F4" x="1472" y="784" />
		<entity schema="citydb" name="feature" color="F4DDBE" x="464" y="48" />
		<entity schema="citydb" name="feature_relation" color="F4DDBE" x="848" y="48" />
		<entity schema="citydb" name="grid_coverage" color="BED3F4" x="1792" y="784" >
			<column name="id" />
			<column name="rasterproperty" />
		</entity>
		<entity schema="citydb" name="implicit_geometry" color="C7F4BE" x="1472" y="1312" />
		<entity schema="citydb" name="index_table" color="BED3F4" x="1792" y="960" />
		<entity schema="citydb" name="objectclass" color="BEBEF4" x="1904" y="48" />
		<entity schema="citydb" name="property" color="F4DDBE" x="48" y="48" >
			<column name="id" />
			<column name="feature_id" />
			<column name="relation_id" />
			<column name="parent_id" />
			<column name="root_id" />
			<column name="namespace" />
			<column name="name" />
			<column name="index_number" />
			<column name="datatype" />
			<column name="data_valtype" />
			<column name="val_int" />
			<column name="val_double" />
			<column name="val_string" />
			<column name="val_date" />
			<column name="val_uri" />
			<column name="val_geometry" />
			<column name="val_surface_geometry" />
			<column name="val_implicitgeom_id" />
			<column name="val_implicitgeom_refpoint" />
			<column name="val_implicitgeom_transform" />
			<column name="val_grid_coverage" />
			<column name="val_appearance" />
			<column name="val_dynamizer" />
			<column name="val_feature" />
			<column name="val_feature_is_xlink" />
			<column name="val_code" />
			<column name="val_codelist" />
			<column name="val_uom" />
			<column name="val_complex" />
			<column name="val_xml" />
		</entity>
		<entity schema="citydb" name="schema" color="BEBEF4" x="2224" y="48" />
		<entity schema="citydb" name="schema_referencing" color="BEBEF4" x="2624" y="48" />
		<entity schema="citydb" name="schema_to_objectclass" color="BEBEF4" x="2624" y="368" />
		<entity schema="citydb" name="surface_data" color="C7F4BE" x="2192" y="1184" />
		<entity schema="citydb" name="surface_geometry" color="C7F4BE" x="1840" y="1184" />
		<entity schema="citydb" name="tex_image" color="C7F4BE" x="2592" y="1184" />
		<entity schema="citydb" name="textureparam" color="C7F4BE" x="1824" y="1552" />
		<script name="SQL Editor" id="Editor-1e5b" language="SQL" >
			<string><![CDATA[SELECT id, is_ade_class, is_toplevel, classname, tablename, superclass_id, baseclass_id, ade_id
FROM
	citydb.objectclass s;]]></string>
		</script>
		<browser id="Browse-1401" name="Relational Data Explorer" confirm_updates="y" >
			<browse_table schema="citydb" entity="objectclass" x="20" y="20" width="400" height="300" >
				<browse_table schema="citydb" entity="aggregation_info" fk="aggregation_info_fk1" x="440" y="20" width="500" height="350" />
			</browse_table>
		</browser>
		<query id="Query-e3a" name="Query Builder" >
			<query_table schema="citydb" name="objectclass" alias="o" x="48" y="48" >
				<column name="id" />
				<column name="ade_id" />
				<column name="baseclass_id" />
				<column name="classname" />
				<column name="is_ade_class" />
				<column name="is_toplevel" />
				<column name="superclass_id" />
				<column name="tablename" />
				<query_table schema="citydb" name="aggregation_info" alias="ai" x="240" y="48" fk="aggregation_info_fk1" type="Inner Join" >
					<column name="child_id" />
					<column name="parent_id" />
					<column name="join_table_or_column_name" />
					<column name="min_occurs" />
					<column name="max_occurs" />
					<column name="is_composite" />
				</query_table>
			</query_table>
		</query>
		<form name="Report" id="Report-140f" template="Page" css="container-fluid" view="frame" >
			<var name="samplePageNumber" type="4" value="0" mandatory="n" />
			<var name="sampleRecordsPerPage" type="4" value="100" mandatory="n" />
			<body name="Body" template="Grid" pos="0,0,0,0,f,f" layout="{{-2,-2,-2,-2,-1},{-2,-2,-2,-2}}" scroll="n" html="n" >
				<cell type="label" name="Objectclass Data" template="H3" pos="0,0,1,0,l,c" />
				<cell type="chart" name="Pie" template="Pie" pos="0,1,4,1,l,c" max_records="20" >
					<form_script type="DataSource" language="SQL" >
						<var name="id" type="4" />
						<var name="is_ade_class" type="2" />
						<var name="is_toplevel" type="2" />
						<var name="classname" type="-1" />
						<var name="tablename" type="-1" />
						<var name="superclass_id" type="4" />
						<var name="baseclass_id" type="4" />
						<var name="ade_id" type="4" />
						<script ><![CDATA[SELECT * FROM citydb.objectclass]]></script>
					</form_script>
					<param name="i0" value="classname" />
					<param name="width" value="100%" />
					<param name="v0" value="id" />
					<param name="title" value="Sample Chart" />
					<param name="height" value="400px" />
				</cell>
				<tableview name="sample" template="Table" css="table table-striped table-sm table-hover" pos="0,2,4,2,f,f" layout="{{-2,-2,-2,-2,-2,-2,-2},{-2,-2}}" scroll="n" html="n" header_rows="1" >
					<form_script type="DataSource" language="SQL" >
						<var name="id" type="4" />
						<var name="is_ade_class" type="2" />
						<var name="is_toplevel" type="2" />
						<var name="classname" type="-1" />
						<var name="tablename" type="-1" />
						<var name="superclass_id" type="4" />
						<var name="baseclass_id" type="4" />
						<var name="ade_id" type="4" />
						<script ><![CDATA[SELECT * FROM citydb.objectclass]]></script>
					</form_script>
					<cell type="label" name="id" pos="0,0,0,0,c,c" />
					<cell type="label" name="is_ade_class" pos="1,0,1,0,c,c" />
					<cell type="label" name="is_toplevel" pos="2,0,2,0,c,c" />
					<cell type="label" name="classname" pos="3,0,3,0,c,c" />
					<cell type="label" name="tablename" pos="4,0,4,0,c,c" />
					<cell type="label" name="superclass_id" pos="5,0,5,0,c,c" />
					<cell type="label" name="Button can open other pages." pos="6,0,6,0,c,c" />
					<cell type="label" name="${id}" template="Plain" pos="0,1,0,1,l,c" />
					<cell type="label" name="${is_ade_class}" template="Plain" pos="1,1,1,1,l,c" />
					<cell type="label" name="${is_toplevel}" template="Plain" pos="2,1,2,1,l,c" />
					<cell type="label" name="${classname}" template="Plain" pos="3,1,3,1,l,c" />
					<cell type="label" name="${tablename}" template="Plain" pos="4,1,4,1,l,c" />
					<cell type="label" name="${superclass_id}" template="Plain" pos="5,1,5,1,l,c" />
					<cell type="button" name="More" template="Plain" css="btn btn-default btn-success" pos="6,1,6,1,c,c" ref_id="Report-140f" />
				</tableview>
				<cell type="href" name="" disabled="${samplePageNumber&lt;1}" pos="0,3,0,3,l,c" glyph="FA-ANGLE_DOUBLE_LEFT" ref_id="Report-140f" >
					<var name="samplePageNumber" value="0" />
				</cell>
				<cell type="href" name="" disabled="${samplePageNumber&lt;1}" pos="1,3,1,3,l,c" glyph="FA-ANGLE_LEFT" ref_id="Report-140f" >
					<var name="samplePageNumber" value="${Math.max(0,samplePageNumber-1)}" />
				</cell>
				<cell type="label" name="Page ${samplePageNumber+1}" pos="2,3,2,3,l,c" />
				<cell type="href" name="" disabled="${!sampleHasNextPage}" pos="3,3,3,3,l,c" glyph="FA-ANGLE_RIGHT" ref_id="Report-140f" >
					<var name="samplePageNumber" value="${( samplePageNumber+1 )}" />
				</cell>
			</body>
		</form>
	</layout>
</project>