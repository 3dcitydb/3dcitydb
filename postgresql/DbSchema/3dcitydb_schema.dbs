<?xml version="1.0" encoding="UTF-8" ?>
<project name="PostgreSQL" id="Project-1a7" database="PostgreSQL" >
	<schema name="citydb" >
		<table name="address" >
			<column name="id" type="bigint" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('address_seq'::regclass)]]></defo>
			</column>
			<column name="objectid" type="text" jt="12" />
			<column name="street" type="text" length="1000" jt="12" />
			<column name="house_number" type="text" length="256" jt="12" />
			<column name="po_box" type="text" length="256" jt="12" />
			<column name="zip_code" type="text" length="256" jt="12" />
			<column name="city" type="text" length="256" jt="12" />
			<column name="state" type="text" length="256" jt="12" />
			<column name="country" type="text" length="256" jt="12" />
			<column name="free_text" type="json" length="250" jt="2000" />
			<column name="multi_point" type="geometry(GEOMETRYZ)" jt="1111" />
			<index name="address_multi_point_spx" unique="NORMAL" spec="USING GiST" >
				<column name="multi_point" />
			</index>
			<index name="address_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="address_objectid_inx" unique="NORMAL" >
				<column name="objectid" />
			</index>
		</table>
		<table name="ade" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo><![CDATA[nextval('ade_seq'::regclass)]]></defo>
			</column>
			<column name="adeid" type="text" length="256" jt="12" mandatory="y" />
			<column name="name" type="text" length="1000" jt="12" mandatory="y" />
			<column name="description" type="text" length="4000" jt="12" />
			<column name="version" type="text" length="50" jt="12" />
			<index name="ade_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="appear_to_surface_data" >
			<column name="surface_data_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="appearance_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<index name="appear_to_surface_data_pk" unique="PRIMARY_KEY" >
				<column name="surface_data_id" />
				<column name="appearance_id" />
			</index>
			<index name="appear_to_surface_data_fkx1" unique="NORMAL" >
				<column name="surface_data_id" />
			</index>
			<index name="appear_to_surface_data_fkx2" unique="NORMAL" >
				<column name="appearance_id" />
			</index>
			<fk name="appear_to_surface_data_fk1" to_schema="citydb" to_table="surface_data" delete_action="cascade" update_action="cascade" >
				<fk_column name="surface_data_id" pk="id" />
			</fk>
			<fk name="appear_to_surface_data_fk2" to_schema="citydb" to_table="appearance" update_action="cascade" >
				<fk_column name="appearance_id" pk="id" />
			</fk>
		</table>
		<table name="appearance" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('appearance_seq'::regclass)]]></defo>
			</column>
			<column name="objectid" prior="appearanceid" type="text" length="256" jt="12" />
			<column name="identifier" type="text" length="256" jt="12" />
			<column name="identifier_codespace" type="text" length="256" jt="12" />
			<column name="theme" type="text" length="256" jt="12" />
			<column name="creation_date" type="timestamptz" jt="93" />
			<column name="termination_date" type="timestamptz" jt="93" />
			<column name="valid_from" type="timestamptz" jt="93" />
			<column name="valid_to" type="timestamptz" jt="93" />
			<column name="is_global" type="integer" jt="4" />
			<column name="feature_id" prior="cityobject_id" type="bigint" jt="-5" />
			<index name="appearance_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="appearance_objectid_inx" unique="NORMAL" >
				<column name="objectid" />
			</index>
			<index name="appearance_theme_inx" unique="NORMAL" >
				<column name="theme" />
			</index>
			<index name="appearance_feature_fkx" unique="NORMAL" >
				<column name="feature_id" />
			</index>
			<index name="appearance_identifier_inx" unique="NORMAL" >
				<column name="identifier" />
				<column name="identifier_codespace" />
			</index>
			<fk name="appearance_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="feature_id" pk="id" />
			</fk>
		</table>
		<table name="codelist" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('codelist_seq'::regclass)]]></defo>
			</column>
			<column name="codelist_type" type="text" length="256" jt="12" />
			<column name="url" type="text" length="4000" jt="12" />
			<column name="mime_type" prior="mimetype" type="text" length="256" jt="12" />
			<index name="codelist_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="codelist_codelist_type_inx" unique="NORMAL" >
				<column name="codelist_type" />
			</index>
		</table>
		<table name="codelist_entry" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('codelist_entry_seq'::regclass)]]></defo>
			</column>
			<column name="codelist_id" type="bigint" jt="-5" mandatory="y" />
			<column name="code" type="text" length="256" jt="12" />
			<column name="definition" type="text" length="256" jt="12" />
			<index name="codelist_entry_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="codelist_entry_codelist_idx" unique="NORMAL" >
				<column name="codelist_id" />
			</index>
			<fk name="codelist_entry_codelist_fk" to_schema="citydb" to_table="codelist" delete_action="cascade" update_action="cascade" >
				<fk_column name="codelist_id" pk="id" />
			</fk>
		</table>
		<table name="database_srs" >
			<column name="srid" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="srs_name" prior="gml_srs_name" type="text" length="1000" jt="12" />
			<index name="database_srs_pk" unique="PRIMARY_KEY" >
				<column name="srid" />
			</index>
		</table>
		<table name="feature" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('feature_seq'::regclass)]]></defo>
			</column>
			<column name="objectclass_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="objectid" prior="featureid" type="text" length="256" jt="12" />
			<column name="identifier" type="text" length="256" jt="12" />
			<column name="identifier_codespace" prior="identifier_namespace" type="text" length="256" jt="12" />
			<column name="envelope" type="geometry(GEOMETRYZ)" jt="1111" />
			<column name="last_modification_date" type="timestamptz" decimal="6" jt="93" />
			<column name="updating_person" type="text" length="256" jt="12" />
			<column name="reason_for_update" type="text" length="4000" jt="12" />
			<column name="lineage" type="text" length="256" jt="12" />
			<column name="creation_date" type="timestamptz" decimal="6" jt="93" />
			<column name="termination_date" type="timestamptz" decimal="6" jt="93" />
			<column name="valid_from" type="timestamptz" decimal="6" jt="93" />
			<column name="valid_to" type="timestamptz" decimal="6" jt="93" />
			<column name="citymodel_id" type="bigint" jt="-5" />
			<index name="feature_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="feature_objectclass_fkx" unique="NORMAL" >
				<column name="objectclass_id" options="" />
			</index>
			<index name="feature_objectid_inx" unique="NORMAL" >
				<column name="objectid" options="" />
			</index>
			<index name="feature_envelope_spx" unique="NORMAL" spec="USING GiST" >
				<column name="envelope" />
			</index>
			<index name="feature_identifier_inx" unique="NORMAL" >
				<column name="identifier" options="" />
				<column name="identifier_codespace" />
			</index>
			<index name="feature_citymodel_fkx" unique="NORMAL" >
				<column name="citymodel_id" options="" />
			</index>
			<fk name="feature_objectclass_fk" to_schema="citydb" to_table="objectclass" update_action="cascade" >
				<fk_column name="objectclass_id" pk="id" />
			</fk>
		</table>
		<table name="feature_hierarchy" >
			<column name="child_id" type="bigint" jt="-5" mandatory="y" />
			<column name="parent_id" type="bigint" jt="-5" mandatory="y" />
			<column name="root_id" type="bigint" jt="-5" />
			<index name="feature_hierarchy_root_fkx" unique="NORMAL" >
				<column name="root_id" />
			</index>
			<index name="feature_hierarchy_child_fkx" unique="NORMAL" >
				<column name="child_id" />
			</index>
			<index name="feature_hierarchy_parent_fkx" unique="NORMAL" >
				<column name="parent_id" />
			</index>
			<index name="feature_hierarchy_pk" unique="PRIMARY_KEY" >
				<column name="child_id" />
				<column name="parent_id" />
			</index>
			<fk name="feature_hierarchy_child_fk" to_schema="citydb" to_table="feature" >
				<fk_column name="child_id" pk="id" />
			</fk>
			<fk name="feature_hierarchy_parent_fk" to_schema="citydb" to_table="feature" >
				<fk_column name="parent_id" pk="id" />
			</fk>
			<fk name="feature_hierarchy_root_fk" to_schema="citydb" to_table="feature" >
				<fk_column name="root_id" pk="id" />
			</fk>
		</table>
		<table name="geometry_data" prior="explicit_geometry" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('geometry_data_seq'::regclass)]]></defo>
			</column>
			<column name="type" type="integer" jt="4" />
			<column name="objectid" prior="gmlid" type="text" length="256" jt="12" />
			<column name="geometry" type="geometry(GEOMETRYZ)" jt="1111" />
			<column name="implicit_geometry" type="geometry(GEOMETRYZ)" jt="1111" />
			<column name="properties" type="json" jt="2000" />
			<column name="feature_id" prior="cityobject_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="geometry_data_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="geometry_data_objectid_inx" unique="NORMAL" >
				<column name="objectid" />
			</index>
			<index name="geometry_data_feature_fkx" unique="NORMAL" >
				<column name="feature_id" />
			</index>
			<index name="geometry_data_spx" unique="NORMAL" >
				<column name="geometry" />
			</index>
			<fk name="geometry_data_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="feature_id" pk="id" />
			</fk>
		</table>
		<table name="implicit_geometry" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('implicit_geometry_seq'::regclass)]]></defo>
			</column>
			<column name="objectid" prior="gmlid" type="text" length="256" jt="12" />
			<column name="mime_type" type="text" length="256" jt="12" />
			<column name="reference_to_library" type="text" length="4000" jt="12" />
			<column name="library_object" type="bytea" decimal="0" jt="-2" />
			<column name="relative_geometry_id" prior="relative_brep_id" type="bigint" length="19" decimal="0" jt="-5" />
			<index name="implicit_geometry_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="implicit_geom_ref2lib_inx" unique="NORMAL" >
				<column name="reference_to_library" />
			</index>
			<index name="implicit_geometry_fkx" unique="NORMAL" >
				<column name="relative_geometry_id" />
			</index>
			<index name="implicit_geometry_inx" unique="NORMAL" >
				<column name="objectid" />
			</index>
			<fk name="implicit_geometry_fk" to_schema="citydb" to_table="geometry_data" update_action="cascade" >
				<fk_column name="relative_geometry_id" pk="id" />
			</fk>
		</table>
		<table name="objectclass" >
			<column name="id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="ade_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="baseclass_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="superclass_id" type="integer" length="10" decimal="0" jt="4" />
			<column name="classname" type="text" length="256" jt="12" />
			<column name="is_toplevel" type="numeric" jt="2" />
			<index name="objectclass_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="objectclass_superclass_fkx" unique="NORMAL" >
				<column name="superclass_id" />
			</index>
			<index name="objectclass_baseclass_fkx" unique="NORMAL" >
				<column name="baseclass_id" />
			</index>
			<fk name="objectclass_ade_fk" to_schema="citydb" to_table="ade" delete_action="cascade" update_action="cascade" >
				<fk_column name="ade_id" pk="id" />
			</fk>
			<fk name="objectclass_baseclass_fk" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="baseclass_id" pk="id" />
			</fk>
			<fk name="objectclass_superclass_fk" to_schema="citydb" to_table="objectclass" delete_action="cascade" update_action="cascade" >
				<fk_column name="superclass_id" pk="id" />
			</fk>
		</table>
		<table name="property" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('property_seq'::regclass)]]></defo>
			</column>
			<column name="feature_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="parent_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="root_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="lod" type="text" length="256" jt="12" />
			<column name="namespace" type="text" length="256" jt="12" />
			<column name="name" type="text" length="256" jt="12" />
			<column name="index_number" type="integer" length="10" decimal="0" jt="4" />
			<column name="data_valtype" type="integer" length="10" decimal="0" jt="4" />
			<column name="val_int" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_double" type="double precision" jt="3" />
			<column name="val_string" type="text" length="4000" jt="12" />
			<column name="val_date" type="timestamptz" decimal="6" jt="93" />
			<column name="val_date_offset" type="integer" jt="4" />
			<column name="val_uri" type="text" length="4000" jt="12" />
			<column name="val_address" type="bigint" length="100" jt="-5" />
			<column name="val_geometry" prior="val_surface_geometry" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_implicitgeom" prior="val_implicitgeom_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_implicitgeom_refpoint" type="geometry(GEOMETRYZ)" jt="1111" />
			<column name="val_implicitgeom_transform" type="text" length="1000" jt="12" />
			<column name="val_appearance" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_dynamizer" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_feature" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="val_is_reference" prior="val_feature_is_xlink" type="integer" length="10" decimal="0" jt="4" />
			<column name="val_code" type="text" length="256" jt="12" />
			<column name="val_codelist" type="bigint" jt="-5" />
			<column name="val_uom" type="text" jt="12" />
			<column name="val_source" prior="val_xml" type="text" jt="12" />
			<column name="val_source_mime_type" type="text" length="256" jt="12" />
			<index name="property_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="property_feature_fkx" unique="NORMAL" >
				<column name="feature_id" />
			</index>
			<index name="property_parent_fkx" unique="NORMAL" >
				<column name="parent_id" />
			</index>
			<index name="property_namespace_inx" unique="NORMAL" >
				<column name="namespace" />
			</index>
			<index name="property_name_inx" unique="NORMAL" >
				<column name="name" />
			</index>
			<index name="property_root_fkx" unique="NORMAL" >
				<column name="root_id" />
			</index>
			<index name="property_data_valtype_inx" unique="NORMAL" >
				<column name="data_valtype" />
			</index>
			<index name="property_val_feature_fkx" unique="NORMAL" >
				<column name="val_feature" />
			</index>
			<index name="property_namespace_name_inx" unique="NORMAL" >
				<column name="namespace" />
				<column name="name" />
			</index>
			<index name="property_val_string_inx" unique="NORMAL" >
				<column name="val_string" />
			</index>
			<index name="property_val_uom_inx" unique="NORMAL" >
				<column name="val_uom" />
			</index>
			<index name="property_val_uri_inx" unique="NORMAL" >
				<column name="val_uri" />
			</index>
			<index name="property_lod_inx" unique="NORMAL" >
				<column name="lod" />
			</index>
			<index name="property_val_int_inx" unique="NORMAL" >
				<column name="val_int" />
			</index>
			<index name="property_val_double_inx" unique="NORMAL" >
				<column name="val_double" />
			</index>
			<index name="property_val_date_inx" unique="NORMAL" >
				<column name="val_date" />
			</index>
			<index name="property_val_geometry_fkx" unique="NORMAL" >
				<column name="val_geometry" />
			</index>
			<index name="property_val_implicitgeom_fkx" unique="NORMAL" >
				<column name="val_implicitgeom" />
			</index>
			<index name="property_val_appearance_fkx" unique="NORMAL" >
				<column name="val_appearance" />
			</index>
			<index name="property_val_dynamizer_fkx" unique="NORMAL" >
				<column name="val_dynamizer" />
			</index>
			<index name="property_val_codelist_fkx" unique="NORMAL" >
				<column name="val_codelist" />
			</index>
			<index name="property_val_address_fkx" unique="NORMAL" >
				<column name="val_address" />
			</index>
			<index name="property_val_implicitgeom_spx" unique="NORMAL" spec="USING GiST" >
				<column name="val_implicitgeom_refpoint" />
			</index>
			<fk name="property_appearance_fk" to_schema="citydb" to_table="appearance" update_action="cascade" >
				<fk_column name="val_appearance" pk="id" />
			</fk>
			<fk name="property_codelist_fk" to_schema="citydb" to_table="codelist" update_action="cascade" >
				<fk_column name="val_codelist" pk="id" />
			</fk>
			<fk name="property_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="feature_id" pk="id" />
			</fk>
			<fk name="property_val_feature_fk" to_schema="citydb" to_table="feature" update_action="cascade" >
				<fk_column name="val_feature" pk="id" />
			</fk>
			<fk name="property_val_implicitgeom_fk" to_schema="citydb" to_table="implicit_geometry" update_action="cascade" >
				<fk_column name="val_implicitgeom" pk="id" />
			</fk>
			<fk name="property_parent_fk" to_schema="citydb" to_table="property" update_action="cascade" options="" >
				<fk_column name="parent_id" pk="id" />
			</fk>
			<fk name="property_root_fk" to_schema="citydb" to_table="property" delete_action="cascade" update_action="cascade" options="DEFERRABLE INITIALLY DEFERRED" >
				<fk_column name="root_id" pk="id" />
			</fk>
			<fk name="property_val_geometry_fk" to_schema="citydb" to_table="geometry_data" update_action="cascade" >
				<fk_column name="val_geometry" pk="id" />
			</fk>
			<fk name="property_val_address_fk" to_schema="citydb" to_table="address" update_action="cascade" >
				<fk_column name="val_address" pk="id" />
			</fk>
		</table>
		<table name="surface_data" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('surface_data_seq'::regclass)]]></defo>
			</column>
			<column name="objectid" prior="surfacedataid" type="text" length="256" jt="12" />
			<column name="identifier" type="text" length="256" jt="12" />
			<column name="identifier_codespace" type="text" length="256" jt="12" />
			<column name="is_front" type="numeric" jt="2" />
			<column name="objectclass_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="x3d_shininess" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_transparency" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_ambient_intensity" type="double precision" length="17" decimal="17" jt="3" />
			<column name="x3d_specular_color" type="text" length="256" jt="12" />
			<column name="x3d_diffuse_color" type="text" length="256" jt="12" />
			<column name="x3d_emissive_color" type="text" length="256" jt="12" />
			<column name="x3d_is_smooth" type="numeric" jt="2" />
			<column name="tex_image_id" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="tex_texture_type" type="text" length="256" jt="12" />
			<column name="tex_wrap_mode" type="text" length="256" jt="12" />
			<column name="tex_border_color" type="text" length="256" jt="12" />
			<column name="gt_prefer_worldfile" type="numeric" jt="2" />
			<column name="gt_orientation" type="text" length="256" jt="12" />
			<column name="gt_reference_point" type="geometry(POINT)" jt="1111" />
			<index name="surface_data_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="surface_data_objectid_inx" unique="NORMAL" >
				<column name="objectid" />
			</index>
			<index name="surface_data_tex_image_fkx" unique="NORMAL" >
				<column name="tex_image_id" />
			</index>
			<index name="surface_data_objclass_fkx" unique="NORMAL" >
				<column name="objectclass_id" />
			</index>
			<index name="surface_data_spx" unique="NORMAL" >
				<column name="gt_reference_point" />
			</index>
			<index name="surface_data_identifier_inx" unique="NORMAL" >
				<column name="identifier" />
				<column name="identifier_codespace" />
			</index>
			<fk name="surface_data_objclass_fk" to_schema="citydb" to_table="objectclass" update_action="cascade" >
				<fk_column name="objectclass_id" pk="id" />
			</fk>
			<fk name="surface_data_tex_image_fk" to_schema="citydb" to_table="tex_image" update_action="cascade" >
				<fk_column name="tex_image_id" pk="id" />
			</fk>
		</table>
		<table name="surface_data_mapping" prior="textureparam" >
			<column name="surface_data_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="geometry_data_id" prior="geometry_id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" />
			<column name="texture_mapping" prior="is_texture_parametrization" type="json" jt="2000" />
			<column name="material_mapping" prior="texture_coordinates" type="json" jt="2000" />
			<column name="world_to_texture_mapping" prior="world_to_texture" type="json" length="1000" jt="2000" />
			<index name="surface_data_mapping_pk" unique="PRIMARY_KEY" >
				<column name="geometry_data_id" />
				<column name="surface_data_id" />
			</index>
			<index name="surface_data_mapping_fkx1" unique="NORMAL" >
				<column name="geometry_data_id" />
			</index>
			<index name="surface_data_mapping_fkx2" unique="NORMAL" >
				<column name="surface_data_id" />
			</index>
			<fk name="surface_data_mapping_fk1" to_schema="citydb" to_table="geometry_data" delete_action="cascade" update_action="cascade" >
				<fk_column name="geometry_data_id" pk="id" />
			</fk>
			<fk name="surface_data_mapping_fk2" to_schema="citydb" to_table="surface_data" delete_action="cascade" update_action="cascade" >
				<fk_column name="surface_data_id" pk="id" />
			</fk>
		</table>
		<table name="tex_image" >
			<column name="id" type="bigint" length="19" decimal="0" jt="-5" mandatory="y" >
				<defo><![CDATA[nextval('tex_image_seq'::regclass)]]></defo>
			</column>
			<column name="tex_image_uri" type="text" length="4000" jt="12" />
			<column name="tex_image_data" type="bytea" decimal="0" jt="-2" />
			<column name="tex_mime_type" type="text" length="256" jt="12" />
			<column name="tex_mime_type_codespace" type="text" length="4000" jt="12" />
			<index name="tex_image_pk" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<sequence name="address_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="ade_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="appearance_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="codelist_entry_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="codelist_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="feature_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="geometry_data_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="implicit_geometry_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="property_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="surface_data_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
		<sequence name="tex_image_seq" options="INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE" />
	</schema>
	<connector name="PostgreSQL" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-42.3.5.jar" driver_desc="Standard" host="localhost" port="9020" instance="demo20_db" user="demo20" passwd="bGFoYW5h" />
	<connector name="PostgreSQL" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-42.3.5.jar" driver_desc="Standard" host="localhost" port="5432" instance="test" user="postgres" passwd="MTI1MTI1" schema_mapping="citydb:public" />
	<layout name="Appearance" id="Layout-f00" show_relation="columns" >
		<entity schema="citydb" name="appear_to_surface_data" color="3986C1" x="816" y="48" />
		<entity schema="citydb" name="appearance" color="3986C1" x="592" y="160" />
		<entity schema="citydb" name="surface_data" color="3986C1" x="336" y="48" />
		<entity schema="citydb" name="surface_data_mapping" color="3986C1" x="784" y="416" />
		<entity schema="citydb" name="tex_image" color="3986C1" x="48" y="432" />
	</layout>
	<layout name="Core" id="Layout-14f3" show_relation="columns" >
		<entity schema="citydb" name="address" color="3986C1" x="48" y="592" />
		<entity schema="citydb" name="codelist" color="3986C1" x="656" y="688" />
		<entity schema="citydb" name="codelist_entry" color="3986C1" x="912" y="688" />
		<entity schema="citydb" name="feature" color="3986C1" x="704" y="48" />
		<entity schema="citydb" name="property" color="3986C1" x="320" y="48" />
	</layout>
	<layout name="Geometry" id="Layout-1a94" show_relation="columns" >
		<entity schema="citydb" name="geometry_data" color="3986C1" x="432" y="192" />
		<entity schema="citydb" name="implicit_geometry" color="3986C1" x="48" y="48" />
	</layout>
	<layout name="Main Layout" id="Layout-1758" joined_routing="y" show_column_type="y" show_relation="name" >
		<comment><![CDATA[PostgreSQL]]></comment>
		<entity schema="citydb" name="address" color="F4DDBE" x="704" y="688" />
		<entity schema="citydb" name="ade" color="BEBEF4" x="1712" y="288" />
		<entity schema="citydb" name="appear_to_surface_data" color="F4BEC7" x="1168" y="1072" />
		<entity schema="citydb" name="appearance" color="F4BEC7" x="1264" y="640" />
		<entity schema="citydb" name="codelist" color="F4DDBE" x="48" y="672" />
		<entity schema="citydb" name="codelist_entry" color="F4DDBE" x="336" y="800" />
		<entity schema="citydb" name="database_srs" color="BEBEF4" x="1424" y="80" />
		<entity schema="citydb" name="feature" color="F4DDBE" x="688" y="80" />
		<entity schema="citydb" name="feature_hierarchy" color="F4DDBE" x="752" y="512" />
		<entity schema="citydb" name="geometry_data" color="C7F4BE" x="576" y="1072" />
		<entity schema="citydb" name="implicit_geometry" color="C7F4BE" x="112" y="1296" />
		<entity schema="citydb" name="objectclass" color="BEBEF4" x="1248" y="320" />
		<entity schema="citydb" name="property" color="F4DDBE" x="160" y="80" />
		<entity schema="citydb" name="surface_data" color="F4BEC7" x="1616" y="784" />
		<entity schema="citydb" name="surface_data_mapping" color="F4BEC7" x="1168" y="1312" />
		<entity schema="citydb" name="tex_image" color="F4BEC7" x="1680" y="1296" />
		<group name="Geometry" color="EEF7EC" >
			<entity schema="citydb" name="geometry_data" />
			<entity schema="citydb" name="implicit_geometry" />
		</group>
		<group name="Metadata" color="ECECF7" >
			<entity schema="citydb" name="ade" />
			<entity schema="citydb" name="database_srs" />
			<entity schema="citydb" name="objectclass" />
		</group>
		<group name="Core" color="F7F2EC" >
			<entity schema="citydb" name="codelist_entry" />
			<entity schema="citydb" name="address" />
			<entity schema="citydb" name="codelist" />
			<entity schema="citydb" name="property" />
			<entity schema="citydb" name="feature" />
			<entity schema="citydb" name="feature_hierarchy" />
		</group>
		<group name="Appearance" color="FFCCFF" >
			<entity schema="citydb" name="appearance" />
			<entity schema="citydb" name="surface_data" />
			<entity schema="citydb" name="tex_image" />
			<entity schema="citydb" name="surface_data_mapping" />
			<entity schema="citydb" name="appear_to_surface_data" />
		</group>
		<script name="SQL_Editor" id="Editor-c70" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_id_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	gmlid                varchar(256)    ,
	gmlid_namespace      varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	xml_source           text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pkey PRIMARY KEY ( id ),
	CONSTRAINT feature_gmlid_unique UNIQUE ( gmlid ) 
 );

CREATE INDEX feature_objectclass_id_idx ON citydb.feature  ( objectclass_id );

CREATE INDEX feature_is_toplevel_btr ON citydb.feature  ( is_toplevel );

CREATE INDEX feature_gmlid_btr ON citydb.feature  ( gmlid );

CREATE INDEX feature_identifier ON citydb.feature  ( identifier );

CREATE INDEX feature_envelope_gist ON citydb.feature  ( envelope );

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.xml_source IS 'Adopted from 3DCityDB Version 4 - has this been used in the past?';]]></string>
		</script>
		<script name="SQL_Editor_001" id="Editor-223" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_id_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	relation_id          bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  varchar(256)    ,
	namespace            varchar(256)    ,
	name                 varchar(256)    ,
	index_number         integer    ,
	datatype             varchar    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           varchar(256)    ,
	val_date             timestamptz    ,
	val_uri              varchar(4000)    ,
	val_geometry         geometry    ,
	val_surface_geometry bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform varchar(1000)    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             varchar(256)    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_complex          json    ,
	val_xml              xml    ,
	CONSTRAINT property_pkey PRIMARY KEY ( id ),
	CONSTRAINT property_unique_feature_id_namespace_name_index UNIQUE ( feature_id, namespace, name, index_number ) 
 );

CREATE INDEX property_feature_id_idx ON citydb.property  ( feature_id );

CREATE INDEX property_relation_id_idx ON citydb.property  ( relation_id );

CREATE INDEX property_parent_id_idx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_btr ON citydb.property  ( namespace );

CREATE INDEX property_name_btr ON citydb.property  ( name );

CREATE INDEX property_root_id_idx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_btr ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_btr ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_btr ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_btr ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_btr ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_btr ON citydb.property  ( val_uri );

CREATE INDEX property_lod_idx ON citydb.property  ( lod );

CREATE INDEX property_val_int_idx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_idx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_idx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_idx ON citydb.property USING GiST ( val_geometry );

CREATE INDEX property_val_surf_geom_inx ON citydb.property  ( val_surface_geometry );

CREATE INDEX property_val_implicitgeom_idx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_idx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_idx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_idx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_idx ON citydb.property  ( val_codelist );

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_id_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_id_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

COMMENT ON TABLE citydb.property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN citydb.property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN citydb.property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN citydb.property.lod IS 'The lod of the property';

COMMENT ON COLUMN citydb.property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN citydb.property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN citydb.property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN citydb.property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN citydb.property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN citydb.property.val_surface_geometry IS 'Foreign key to SURFACE_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN citydb.property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN citydb.property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN citydb.property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_dynamizer IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN citydb.property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN citydb.property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN citydb.property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN citydb.property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN citydb.property.val_complex IS 'stores all data of complex datatypes as a JSON string (e.g. con:Height)';

COMMENT ON COLUMN citydb.property.val_xml IS 'stores XML data';]]></string>
		</script>
		<script name="SQL_Editor_002" id="Editor-177f" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1MINVALUE 0MAXVALUE 9223372036854775807START WITH 1CACHE 1NO CYCLEOWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             varchar(256)    ,
	street               varchar(1000)    ,
	house_number         varchar(256)    ,
	po_box               varchar(256)    ,
	zip_code             varchar(256)    ,
	city                 varchar(256)    ,
	"state"              varchar(256)    ,
	country              varchar(256)    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk UNIQUE ( id ) 
 );

CREATE INDEX address_inx ON citydb.address  ( objectid );

CREATE INDEX address_point_spx ON citydb.address  ( multi_point );]]></string>
		</script>
		<script name="SQL_Editor_003" id="Editor-1ec0" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             varchar(256)    ,
	street               varchar(1000)    ,
	house_number         varchar(256)    ,
	po_box               varchar(256)    ,
	zip_code             varchar(256)    ,
	city                 varchar(256)    ,
	"state"              varchar(256)    ,
	country              varchar(256)    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk UNIQUE ( id ) 
 );

CREATE INDEX address_inx ON citydb.address  ( objectid );

CREATE INDEX address_point_spx ON citydb.address  ( multi_point );]]></string>
		</script>
		<script name="SQL_Editor_004" id="Editor-23bc" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             varchar(256)    ,
	street               varchar(1000)    ,
	house_number         varchar(256)    ,
	po_box               varchar(256)    ,
	zip_code             varchar(256)    ,
	city                 varchar(256)    ,
	"state"              varchar(256)    ,
	country              varchar(256)    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk UNIQUE ( id ) 
 );

CREATE INDEX address_inx ON citydb.address  ( objectid );

CREATE INDEX address_point_spx ON citydb.address  ( multi_point );]]></string>
		</script>
		<script name="SQL_Editor_005" id="Editor-1abb" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             varchar(256)    ,
	street               varchar(1000)    ,
	house_number         varchar(256)    ,
	po_box               varchar(256)    ,
	zip_code             varchar(256)    ,
	city                 varchar(256)    ,
	"state"              varchar(256)    ,
	country              varchar(256)    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk UNIQUE ( id ) ,
	CONSTRAINT pk_address PRIMARY KEY ( id )
 );

CREATE INDEX address_inx ON citydb.address  ( objectid );

CREATE INDEX address_point_spx ON citydb.address  ( multi_point );]]></string>
		</script>
		<script name="SQL_Editor_006" id="Editor-1b72" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             varchar(256)    ,
	street               varchar(1000)    ,
	house_number         varchar(256)    ,
	po_box               varchar(256)    ,
	zip_code             varchar(256)    ,
	city                 varchar(256)    ,
	"state"              varchar(256)    ,
	country              varchar(256)    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk UNIQUE ( id ) ,
	CONSTRAINT pk_address PRIMARY KEY ( id )
 );

CREATE INDEX address_inx ON citydb.address  ( objectid );

CREATE INDEX address_point_spx ON citydb.address USING GiST ( multi_point );]]></string>
		</script>
		<script name="SQL_Editor_007" id="Editor-26c2" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  ASC  NULLS LAST  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel );

CREATE INDEX featureid_inx ON citydb.feature  ( objectid );

CREATE INDEX feature_envelope_spx ON citydb.feature  ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier, identifier_namespace );

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_008" id="Editor-bef" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id  ASC  NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel );

CREATE INDEX featureid_inx ON citydb.feature  ( objectid );

CREATE INDEX feature_envelope_spx ON citydb.feature  ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier, identifier_namespace );

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_009" id="Editor-1704" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id  ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature USING btree ( is_toplevel ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX featureid_inx ON citydb.feature  ( objectid );

CREATE INDEX feature_envelope_spx ON citydb.feature  ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature USING btree ( identifier ASC NULLS LAST, identifier_namespace ) WITH FILLFACTOR 90;

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_010" id="Editor-883" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id  ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature USING btree ( is_toplevel ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature  ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature USING btree ( identifier ASC NULLS LAST, identifier_namespace ) WITH FILLFACTOR 90;

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_011" id="Editor-220f" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id  ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature USING btree ( is_toplevel ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature USING btree ( identifier ASC NULLS LAST, identifier_namespace ) WITH FILLFACTOR 90;

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_012" id="Editor-46b" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id  ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature USING btree ( is_toplevel ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature USING btree ( identifier ASC NULLS LAST, identifier_namespace ) WITH FILLFACTOR 90;

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_013" id="Editor-178" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type varchar(256)    ,
	objectid             varchar(256)    ,
	identifier           varchar(256)    ,
	identifier_namespace varchar(256)    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      varchar(256)    ,
	reason_for_update    varchar(4000)    ,
	lineage              varchar(256)    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE INDEX feature_objectclass_fkx ON citydb.feature USING btree ( objectclass_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX feature_is_toplevel_inx ON citydb.feature USING btree ( is_toplevel ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature USING btree ( identifier ASC NULLS LAST, identifier_namespace ) WITH FILLFACTOR 90;

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';]]></string>
		</script>
		<script name="SQL_Editor_014" id="Editor-1ba3" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;]]></string>
		</script>
		<script name="SQL_Editor_015" id="Editor-101b" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;]]></string>
		</script>
		<script name="SQL_Editor_016" id="Editor-189d" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE citydb.geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.index_table ( 
	id                   integer DEFAULT nextval('index_table_id_seq'::regclass) NOT NULL  ,
	obj                  index_obj    ,
	CONSTRAINT index_table_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb."schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE citydb.schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE citydb.tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE citydb.surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE citydb.appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE citydb.appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON citydb.address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON citydb.address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON citydb.codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON citydb.codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON citydb.geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON citydb.geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON citydb.geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON citydb.implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON citydb.implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON citydb.implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON citydb.objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON citydb.objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON citydb.schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON citydb.schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON citydb.schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON citydb.schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON citydb.surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON citydb.surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON citydb.surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON citydb.surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON citydb.surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON citydb.surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON citydb.appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON citydb.appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON citydb.appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON citydb.appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON citydb.appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON citydb.appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON citydb.feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON citydb.property  ( feature_id );

CREATE INDEX property_parent_fkx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_inx ON citydb.property  ( namespace );

CREATE INDEX property_name_inx ON citydb.property  ( name );

CREATE INDEX property_root_fkx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_inx ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_inx ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_inx ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_inx ON citydb.property  ( val_uri );

CREATE INDEX property_lod_inx ON citydb.property  ( lod );

CREATE INDEX property_val_int_inx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_inx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_inx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON citydb.property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON citydb.property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON citydb.property  ( val_address );

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES citydb.appearance( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES citydb.codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES citydb.codelist( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES citydb.implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES citydb.grid_coverage( id );

ALTER TABLE citydb.property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES citydb.address( id );

ALTER TABLE citydb."schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES citydb.tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES citydb.geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id );

COMMENT ON TABLE citydb.codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE citydb.property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN citydb.property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN citydb.property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN citydb.property.lod IS 'The lod of the property';

COMMENT ON COLUMN citydb.property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN citydb.property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN citydb.property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN citydb.property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN citydb.property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN citydb.property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN citydb.property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN citydb.property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN citydb.property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN citydb.property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN citydb.property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN citydb.property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN citydb.property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN citydb.property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN citydb.property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_017" id="Editor-2563" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE citydb.geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb."schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE citydb.schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE citydb.tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE citydb.surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE citydb.appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE citydb.appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON citydb.address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON citydb.address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON citydb.codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON citydb.codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON citydb.geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON citydb.geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON citydb.geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON citydb.implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON citydb.implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON citydb.implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON citydb.objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON citydb.objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON citydb.schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON citydb.schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON citydb.schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON citydb.schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON citydb.surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON citydb.surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON citydb.surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON citydb.surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON citydb.surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON citydb.surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON citydb.appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON citydb.appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON citydb.appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON citydb.appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON citydb.appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON citydb.appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON citydb.feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON citydb.property  ( feature_id );

CREATE INDEX property_parent_fkx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_inx ON citydb.property  ( namespace );

CREATE INDEX property_name_inx ON citydb.property  ( name );

CREATE INDEX property_root_fkx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_inx ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_inx ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_inx ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_inx ON citydb.property  ( val_uri );

CREATE INDEX property_lod_inx ON citydb.property  ( lod );

CREATE INDEX property_val_int_inx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_inx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_inx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON citydb.property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON citydb.property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON citydb.property  ( val_address );

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES citydb.appearance( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES citydb.codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES citydb.codelist( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES citydb.implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES citydb.grid_coverage( id );

ALTER TABLE citydb.property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES citydb.address( id );

ALTER TABLE citydb."schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES citydb.tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES citydb.geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id );

COMMENT ON TABLE citydb.codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE citydb.property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN citydb.property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN citydb.property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN citydb.property.lod IS 'The lod of the property';

COMMENT ON COLUMN citydb.property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN citydb.property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN citydb.property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN citydb.property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN citydb.property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN citydb.property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN citydb.property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN citydb.property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN citydb.property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN citydb.property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN citydb.property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN citydb.property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN citydb.property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN citydb.property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN citydb.property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_018" id="Editor-3f1" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id );

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id );

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id );

ALTER TABLE geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id );

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id );

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id );

COMMENT ON TABLE codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN property.lod IS 'The lod of the property';

COMMENT ON COLUMN property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_019" id="Editor-1b5a" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id );

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id );

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id );

ALTER TABLE geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id );

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id );

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id );

COMMENT ON TABLE codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN property.lod IS 'The lod of the property';

COMMENT ON COLUMN property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_020" id="Editor-2034" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE citydb.geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb."schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE citydb.schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE citydb.tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE citydb.surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE citydb.appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE citydb.appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON citydb.address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON citydb.address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON citydb.codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON citydb.codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON citydb.geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON citydb.geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON citydb.geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON citydb.implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON citydb.implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON citydb.implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON citydb.objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON citydb.objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON citydb.schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON citydb.schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON citydb.schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON citydb.schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON citydb.surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON citydb.surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON citydb.surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON citydb.surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON citydb.surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON citydb.surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON citydb.appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON citydb.appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON citydb.appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON citydb.appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON citydb.appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON citydb.appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON citydb.feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON citydb.property  ( feature_id );

CREATE INDEX property_parent_fkx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_inx ON citydb.property  ( namespace );

CREATE INDEX property_name_inx ON citydb.property  ( name );

CREATE INDEX property_root_fkx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_inx ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_inx ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_inx ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_inx ON citydb.property  ( val_uri );

CREATE INDEX property_lod_inx ON citydb.property  ( lod );

CREATE INDEX property_val_int_inx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_inx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_inx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON citydb.property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON citydb.property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON citydb.property  ( val_address );

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES citydb.appearance( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES citydb.feature( id );

ALTER TABLE citydb.codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES citydb.codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id );

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES citydb.geometry(  )  ON UPDATE CASCADE;

ALTER TABLE citydb.implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES citydb.codelist( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES citydb.implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES citydb.grid_coverage( id );

ALTER TABLE citydb.property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES citydb.address( id );

ALTER TABLE citydb."schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES citydb.tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES citydb.geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id );

COMMENT ON TABLE citydb.codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE citydb.property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN citydb.property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN citydb.property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN citydb.property.lod IS 'The lod of the property';

COMMENT ON COLUMN citydb.property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN citydb.property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN citydb.property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN citydb.property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN citydb.property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN citydb.property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN citydb.property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN citydb.property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN citydb.property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN citydb.property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN citydb.property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN citydb.property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN citydb.property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN citydb.property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN citydb.property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_021" id="Editor-1625" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id );

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id );

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id );

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

COMMENT ON TABLE codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN property.lod IS 'The lod of the property';

COMMENT ON COLUMN property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_022" id="Editor-1adc" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          integer  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         integer    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX geometry_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id );

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_parent_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT surface_geom_root_fk FOREIGN KEY (  ) REFERENCES geometry(  )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

COMMENT ON TABLE codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN property.lod IS 'The lod of the property';

COMMENT ON COLUMN property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_023" id="Editor-112e" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb."schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE citydb.schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE citydb.tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE citydb.surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE citydb.appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_point_spx ON citydb.address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON citydb.address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON citydb.codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON citydb.codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON citydb.objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON citydb.objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON citydb.schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON citydb.schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON citydb.schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON citydb.schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON citydb.surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON citydb.surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON citydb.surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON citydb.surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON citydb.appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON citydb.appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON citydb.appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON citydb.appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON citydb.appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON citydb.appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON citydb.feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON citydb.feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX geometry_objectid_inx ON citydb.geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON citydb.geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON citydb.geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON citydb.implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON citydb.implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON citydb.implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON citydb.property  ( feature_id );

CREATE INDEX property_parent_fkx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_inx ON citydb.property  ( namespace );

CREATE INDEX property_name_inx ON citydb.property  ( name );

CREATE INDEX property_root_fkx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_inx ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_inx ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_inx ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_inx ON citydb.property  ( val_uri );

CREATE INDEX property_lod_inx ON citydb.property  ( lod );

CREATE INDEX property_val_int_inx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_inx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_inx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON citydb.property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON citydb.property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON citydb.property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON citydb.surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON citydb.surface_data_mapping  ( surface_data_id );

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES citydb.codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES citydb.codelist( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES citydb.implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES citydb.grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES citydb.address( id )  ON UPDATE CASCADE;

ALTER TABLE citydb."schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES citydb.tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES citydb.geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

COMMENT ON TABLE citydb.codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE citydb.feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.feature.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.feature.objectclass_id IS 'Foreign key to OBJECTCLASS(id) - CityGML feature type';

COMMENT ON COLUMN citydb.feature.is_toplevel IS 'true, if this feature is a toplevel feature';

COMMENT ON COLUMN citydb.feature.space_or_boundary_type IS 'name of the most specific CityGML abstract space or space boundary class (e.g. AbstractOccupiedSpace)';

COMMENT ON COLUMN citydb.feature.envelope IS 'Bounding volume of the feature (if it has a geometry)';

COMMENT ON COLUMN citydb.feature.last_modification_date IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.updating_person IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.reason_for_update IS 'Adopted from 3DCityDB Version 4';

COMMENT ON COLUMN citydb.feature.lineage IS 'Adopted from 3DCityDB Version 4';

COMMENT ON TABLE citydb.property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON COLUMN citydb.property.id IS 'Primary key / surrogate';

COMMENT ON COLUMN citydb.property.feature_id IS 'Foreign key to FEATURE(id) - if the property belongs to a feature_relation, then this attribute is NULL';

COMMENT ON COLUMN citydb.property.parent_id IS 'Foreign key to PROPERTY(id). If this property belongs to a named set of properties (as supported for generic attributes), this attribute links to the parent group';

COMMENT ON COLUMN citydb.property.root_id IS 'Foreign key to PROPERTY(id). Points to the id of the root property entry (only relevant when using nested properties as supported by generic attributes)';

COMMENT ON COLUMN citydb.property.lod IS 'The lod of the property';

COMMENT ON COLUMN citydb.property.namespace IS 'CityGML 3.0 namespace in which this property is defined';

COMMENT ON COLUMN citydb.property.name IS 'Property name (or should we put qualified names here? E.g. core:relativeToWater or core:lod2Solid)';

COMMENT ON COLUMN citydb.property.index_number IS 'Index number (if multiple properties with the same name are stored and the order should be preserved)';

COMMENT ON COLUMN citydb.property.datatype IS 'the datatype should be given as a qualified datatype name from the CityGML schema (e.g. gml:GenericName, gml:DateTime)';

COMMENT ON COLUMN citydb.property.data_valtype IS 'tells in which attribute(s) the value is actually stored (0=val_int, 1=val_double, 2=val_string, 3=val_date, etc.)';

COMMENT ON COLUMN citydb.property.val_geometry IS 'Foreign key to GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom IS 'Foreign key to IMPLICIT_GEOMETRY(id)';

COMMENT ON COLUMN citydb.property.val_implicitgeom_refpoint IS 'base point in 3D world coordinates for the instantiation of the implicit geometry';

COMMENT ON COLUMN citydb.property.val_implicitgeom_transform IS '4x4 transformation matrix encoded as a string of space separated double values (as strings) in row major sequence';

COMMENT ON COLUMN citydb.property.val_grid_coverage IS 'Foreign key to GRID_COVERAGE(id)';

COMMENT ON COLUMN citydb.property.val_appearance IS 'Foreign key to APPEARANCE(id)';

COMMENT ON COLUMN citydb.property.val_dynamizer IS 'Foreign key to DYNAMIZER(id) TODO';

COMMENT ON COLUMN citydb.property.val_feature IS 'Foreign key to FEATURE(id)';

COMMENT ON COLUMN citydb.property.val_feature_is_xlink IS '0=related feature was represented inline, 1=related feature was referenced using an XLink';

COMMENT ON COLUMN citydb.property.val_code IS 'if a code from a codelist should be stored, we could also put the code in the val_string attribute and omit this attribute';

COMMENT ON COLUMN citydb.property.val_codelist IS 'Foreign key to CODELIST(code) (or alternatively - if we do not store codelists also in the 3DCityDB - then a URL to the codelist)';

COMMENT ON COLUMN citydb.property.val_uom IS 'unit of measure (for all subtypes of gml:Measure); the value is stored in val_double';

COMMENT ON COLUMN citydb.property.val_source IS 'stores source data (e.g. xml or json snippet )';]]></string>
		</script>
		<script name="SQL_Editor_024" id="Editor-21e1" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

COMMENT ON TABLE codelist IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE codelist_entry IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE feature IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';

COMMENT ON TABLE property IS 'added at 3DCityDB Version 5.0 for CityGML 3.0';]]></string>
		</script>
		<script name="SQL_Editor_025" id="Editor-1028" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature USING btree ( objectid ASC NULLS LAST ) WITH FILLFACTOR 90;

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature USING btree ( citymodel_id ASC NULLS LAST  ) WITH FILLFACTOR 90;

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_026" id="Editor-177f" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_027" id="Editor-1e7" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(MULTIPOINTZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry    ,
	implicit_geometry    geometry    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_028" id="Editor-35f" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_029" id="Editor-c2" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE citydb.address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citydb.tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE citydb.address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb."schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE citydb.schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE citydb.tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE citydb.surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE citydb.appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citydb.surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON citydb.address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON citydb.address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON citydb.codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON citydb.codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON citydb.objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON citydb.objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON citydb.schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON citydb.schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON citydb.schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON citydb.schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON citydb.surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON citydb.surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON citydb.surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON citydb.surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON citydb.appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON citydb.appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON citydb.appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON citydb.appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON citydb.appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON citydb.appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON citydb.feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON citydb.feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON citydb.feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON citydb.feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON citydb.feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON citydb.feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON citydb.geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON citydb.geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON citydb.geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON citydb.implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON citydb.implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON citydb.implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON citydb.property  ( feature_id );

CREATE INDEX property_parent_fkx ON citydb.property  ( parent_id );

CREATE INDEX property_namespace_inx ON citydb.property  ( namespace );

CREATE INDEX property_name_inx ON citydb.property  ( name );

CREATE INDEX property_root_fkx ON citydb.property  ( root_id );

CREATE INDEX property_data_valtype_inx ON citydb.property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON citydb.property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON citydb.property  ( namespace, name );

CREATE INDEX property_val_string_inx ON citydb.property  ( val_string );

CREATE INDEX property_val_uom_inx ON citydb.property  ( val_uom );

CREATE INDEX property_val_uri_inx ON citydb.property  ( val_uri );

CREATE INDEX property_lod_inx ON citydb.property  ( lod );

CREATE INDEX property_val_int_inx ON citydb.property  ( val_int );

CREATE INDEX property_val_double_inx ON citydb.property  ( val_double );

CREATE INDEX property_val_date_inx ON citydb.property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON citydb.property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON citydb.property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON citydb.property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON citydb.property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON citydb.property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON citydb.property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON citydb.property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON citydb.surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON citydb.surface_data_mapping  ( surface_data_id );

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES citydb.codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citydb.citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES citydb.appearance( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES citydb.codelist( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES citydb.feature( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES citydb.implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES citydb.property( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES citydb.property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES citydb.geometry( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES citydb.grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES citydb.address( id )  ON UPDATE CASCADE;

ALTER TABLE citydb."schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES citydb.ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES citydb."schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES citydb.objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES citydb.tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES citydb.geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE citydb.surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES citydb.surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_030" id="Editor-6d0" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage  ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_031" id="Editor-779" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE  TABLE citydb.grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE INDEX grid_coverage_raster_spx ON citydb.grid_coverage USING GiST ( st_convexhull(rasterproperty) );]]></string>
		</script>
		<script name="SQL_Editor_032" id="Editor-1026" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          boolean    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           numeric    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              varchar    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage USING GiST ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_imp_ref_pt_fkx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_033" id="Editor-301" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage USING GiST ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_034" id="Editor-1a39" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage USING GiST ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_objectid_inx ON geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON geometry  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_035" id="Editor-1437" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	tablename            text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	join_table_or_column_name text  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id, join_table_or_column_name )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE explicit_geometry ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT surface_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage USING GiST ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX geometry_objectid_inx ON explicit_geometry  ( objectid );

CREATE INDEX geometry_cityobject_fkx ON explicit_geometry  ( cityobject_id );

CREATE INDEX geometry_geom_spx ON explicit_geometry  ( geometry );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE explicit_geometry ADD CONSTRAINT geometry_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES explicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES explicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES explicit_geometry( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_036" id="Editor-1990" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE grid_coverage ( 
	id                   bigint DEFAULT nextval('grid_coverage_seq'::regclass) NOT NULL  ,
	rasterproperty       raster    ,
	CONSTRAINT grid_coverage_pk PRIMARY KEY ( id )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_grid_coverage    bigint    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX grid_coverage_raster_spx ON grid_coverage USING GiST ( st_convexhull(rasterproperty) );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_cityobject_fkx ON geometry_data  ( cityobject_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_grid_coverage_fkx ON property  ( val_grid_coverage );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_grid_coverage_fk FOREIGN KEY ( val_grid_coverage ) REFERENCES grid_coverage( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_037" id="Editor-1e15" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	gml_srs_name         text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	cityobject_id        bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_cityobject_fkx ON geometry_data  ( cityobject_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_038" id="Editor-cc0" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_cityobject_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_039" id="Editor-1bae" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	db_prefix            text  NOT NULL  ,
	xml_schemamapping_file text    ,
	drop_db_script       text    ,
	creation_date        timestamptz    ,
	creation_person      text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	classname            text    ,
	is_ade_class         numeric    ,
	is_toplevel          numeric    ,
	superclass_id        integer    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE "schema" ( 
	id                   integer DEFAULT nextval('schema_seq'::regclass) NOT NULL  ,
	is_ade_root          numeric  NOT NULL  ,
	citygml_version      text  NOT NULL  ,
	xml_namespace_uri    text  NOT NULL  ,
	xml_namespace_prefix text  NOT NULL  ,
	xml_schema_location  text    ,
	xml_schemafile       bytea    ,
	xml_schemafile_mime_type text    ,
	ade_id               integer    ,
	CONSTRAINT schema_pk PRIMARY KEY ( id )
 );

CREATE  TABLE schema_referencing ( 
	referencing_id       integer  NOT NULL  ,
	referenced_id        integer  NOT NULL  ,
	CONSTRAINT schema_referencing_pk PRIMARY KEY ( referenced_id, referencing_id )
 );

CREATE  TABLE schema_to_objectclass ( 
	schema_id            integer  NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	CONSTRAINT schema_to_objectclass_pk PRIMARY KEY ( schema_id, objectclass_id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX schema_referencing_fkx1 ON schema_referencing  ( referenced_id );

CREATE INDEX schema_referencing_fkx2 ON schema_referencing  ( referencing_id );

CREATE INDEX schema_to_objectclass_fkx1 ON schema_to_objectclass  ( schema_id );

CREATE INDEX schema_to_objectclass_fkx2 ON schema_to_objectclass  ( objectclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE "schema" ADD CONSTRAINT schema_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk1 FOREIGN KEY ( referencing_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_referencing ADD CONSTRAINT schema_referencing_fk2 FOREIGN KEY ( referenced_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk2 FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE schema_to_objectclass ADD CONSTRAINT schema_to_objectclass_fk1 FOREIGN KEY ( schema_id ) REFERENCES "schema"( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_040" id="Editor-126c" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_041" id="Editor-389" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE grid_coverage_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE schema_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_042" id="Editor-12dc" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_id          bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_043" id="Editor-163" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	datatype             text    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_is_toplevel_inx ON feature  ( is_toplevel  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_044" id="Editor-3bd" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_045" id="Editor-14d8" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_046" id="Editor-879" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	root_feature_id      bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX property_root_feature_fkx ON property  ( root_feature_id );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_feature_fk FOREIGN KEY ( root_feature_id ) REFERENCES feature( id );

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_047" id="Editor-1a8c" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	space_or_boundary_type text    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_feature_is_xlink integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_048" id="Editor-70a" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    ,
	CONSTRAINT aggregation_info_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature_hierarchy ( 
	child_id             bigint  NOT NULL  ,
	parent_id            bigint    ,
	root_id              bigint    ,
	CONSTRAINT feature_hierarchy_pk UNIQUE ( child_id, parent_id ) 
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_is_reference     integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX feature_hierarchy_root_fkx ON feature_hierarchy  ( root_id );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk1 FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_fk2 FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_child_fk FOREIGN KEY ( child_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_parent_fk FOREIGN KEY ( parent_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_root_fk FOREIGN KEY ( root_id ) REFERENCES feature( id );

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_049" id="Editor-1a8" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature_hierarchy ( 
	child_id             bigint  NOT NULL  ,
	parent_id            bigint    ,
	root_id              bigint    ,
	CONSTRAINT feature_hierarchy_pk UNIQUE ( child_id, parent_id ) 
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_is_reference     integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX aggregation_info_child_fkx ON aggregation_info  ( child_id );

CREATE INDEX aggregation_info_parent_fkx ON aggregation_info  ( parent_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX feature_hierarchy_root_fkx ON feature_hierarchy  ( root_id );

CREATE INDEX feature_hierarchy_child_fkx ON feature_hierarchy  ( child_id );

CREATE INDEX feature_hierarchy_parent_fkx ON feature_hierarchy  ( parent_id );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_child_fk FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_parent_fk FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_child_fk FOREIGN KEY ( child_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_parent_fk FOREIGN KEY ( parent_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_root_fk FOREIGN KEY ( root_id ) REFERENCES feature( id );

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_050" id="Editor-9ed" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature_hierarchy ( 
	child_id             bigint  NOT NULL  ,
	parent_id            bigint  NOT NULL  ,
	root_id              bigint    ,
	CONSTRAINT feature_hierarchy_pk UNIQUE ( child_id, parent_id ) 
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_is_reference     integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX aggregation_info_child_fkx ON aggregation_info  ( child_id );

CREATE INDEX aggregation_info_parent_fkx ON aggregation_info  ( parent_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX feature_hierarchy_root_fkx ON feature_hierarchy  ( root_id );

CREATE INDEX feature_hierarchy_child_fkx ON feature_hierarchy  ( child_id );

CREATE INDEX feature_hierarchy_parent_fkx ON feature_hierarchy  ( parent_id );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_child_fk FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_parent_fk FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_child_fk FOREIGN KEY ( child_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_parent_fk FOREIGN KEY ( parent_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_root_fk FOREIGN KEY ( root_id ) REFERENCES feature( id );

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_051" id="Editor-2023" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE aggregation_info ( 
	child_id             integer  NOT NULL  ,
	parent_id            integer  NOT NULL  ,
	property_name        text    ,
	min_occurs           integer    ,
	max_occurs           integer    ,
	is_composite         numeric    
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	cityobject_id        bigint    ,
	citymodel_id         bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE citymodel ( 
	id                   bigint DEFAULT nextval('citymodel_seq'::regclass) NOT NULL  ,
	CONSTRAINT citymodel_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature_hierarchy ( 
	child_id             bigint  NOT NULL  ,
	parent_id            bigint  NOT NULL  ,
	root_id              bigint    ,
	CONSTRAINT feature_hierarchy_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_is_reference     integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX aggregation_info_child_fkx ON aggregation_info  ( child_id );

CREATE INDEX aggregation_info_parent_fkx ON aggregation_info  ( parent_id );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_cityobject_fkx ON appearance  ( cityobject_id );

CREATE INDEX appearance_citymodel_id ON appearance  ( citymodel_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX feature_hierarchy_root_fkx ON feature_hierarchy  ( root_id );

CREATE INDEX feature_hierarchy_child_fkx ON feature_hierarchy  ( child_id );

CREATE INDEX feature_hierarchy_parent_fkx ON feature_hierarchy  ( parent_id );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_child_fk FOREIGN KEY ( child_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE aggregation_info ADD CONSTRAINT aggregation_info_parent_fk FOREIGN KEY ( parent_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_cityobject_fk FOREIGN KEY ( cityobject_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE citymodel ADD CONSTRAINT citymodel_feature_fk FOREIGN KEY ( id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_citymodel_fk FOREIGN KEY ( citymodel_id ) REFERENCES citymodel( id )  ON UPDATE CASCADE;

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_child_fk FOREIGN KEY ( child_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_parent_fk FOREIGN KEY ( parent_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_root_fk FOREIGN KEY ( root_id ) REFERENCES feature( id );

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;]]></string>
		</script>
		<script name="SQL_Editor_052" id="Editor-24" language="SQL" >
			<string><![CDATA[CREATE SCHEMA IF NOT EXISTS citydb;

CREATE SEQUENCE address_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE ade_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 2147483647 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE appearance_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE citymodel_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_entry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE codelist_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE feature_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE geometry_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE implicit_geometry_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE property_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE surface_data_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE SEQUENCE tex_image_seq INCREMENT BY 1 MINVALUE 0 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1 NO CYCLE OWNED BY NONE;

CREATE  TABLE address ( 
	id                   bigint DEFAULT nextval('address_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	street               text    ,
	house_number         text    ,
	po_box               text    ,
	zip_code             text    ,
	city                 text    ,
	"state"              text    ,
	country              text    ,
	free_text            json    ,
	multi_point          geometry(GEOMETRYZ)    ,
	CONSTRAINT address_pk PRIMARY KEY ( id )
 );

CREATE  TABLE ade ( 
	id                   integer DEFAULT nextval('ade_seq'::regclass) NOT NULL  ,
	adeid                text  NOT NULL  ,
	name                 text  NOT NULL  ,
	description          text    ,
	"version"            text    ,
	CONSTRAINT ade_pk PRIMARY KEY ( id )
 );

CREATE  TABLE codelist ( 
	id                   bigint DEFAULT nextval('codelist_seq'::regclass) NOT NULL  ,
	codelist_type        text    ,
	url                  text    ,
	mime_type            text    ,
	CONSTRAINT codelist_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE codelist_entry ( 
	id                   bigint DEFAULT nextval('codelist_entry_seq'::regclass) NOT NULL  ,
	codelist_id          bigint  NOT NULL  ,
	code                 text    ,
	definition           text    ,
	CONSTRAINT codelist_entry_pkey PRIMARY KEY ( id )
 );

CREATE  TABLE database_srs ( 
	srid                 integer  NOT NULL  ,
	srs_name             text    ,
	CONSTRAINT database_srs_pk PRIMARY KEY ( srid )
 );

CREATE  TABLE objectclass ( 
	id                   integer  NOT NULL  ,
	ade_id               integer    ,
	baseclass_id         integer    ,
	superclass_id        integer    ,
	classname            text    ,
	is_toplevel          numeric    ,
	CONSTRAINT objectclass_pk PRIMARY KEY ( id )
 );

CREATE  TABLE tex_image ( 
	id                   bigint DEFAULT nextval('tex_image_seq'::regclass) NOT NULL  ,
	tex_image_uri        text    ,
	tex_image_data       bytea    ,
	tex_mime_type        text    ,
	tex_mime_type_codespace text    ,
	CONSTRAINT tex_image_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature ( 
	id                   bigint DEFAULT nextval('feature_seq'::regclass) NOT NULL  ,
	objectclass_id       integer  NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	envelope             geometry(GEOMETRYZ)    ,
	last_modification_date timestamptz    ,
	updating_person      text    ,
	reason_for_update    text    ,
	lineage              text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	citymodel_id         bigint    ,
	CONSTRAINT feature_pk PRIMARY KEY ( id )
 );

CREATE  TABLE feature_hierarchy ( 
	child_id             bigint  NOT NULL  ,
	parent_id            bigint  NOT NULL  ,
	root_id              bigint    ,
	CONSTRAINT feature_hierarchy_pk PRIMARY KEY ( child_id, parent_id )
 );

CREATE  TABLE geometry_data ( 
	id                   bigint DEFAULT nextval('geometry_data_seq'::regclass) NOT NULL  ,
	"type"               integer    ,
	objectid             text    ,
	geometry             geometry(GEOMETRYZ)    ,
	implicit_geometry    geometry(GEOMETRYZ)    ,
	properties           json    ,
	feature_id           bigint    ,
	CONSTRAINT geometry_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE implicit_geometry ( 
	id                   bigint DEFAULT nextval('implicit_geometry_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	mime_type            text    ,
	reference_to_library text    ,
	library_object       bytea    ,
	relative_geometry_id bigint    ,
	CONSTRAINT implicit_geometry_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data ( 
	id                   bigint DEFAULT nextval('surface_data_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	is_front             numeric    ,
	objectclass_id       integer  NOT NULL  ,
	x3d_shininess        double precision    ,
	x3d_transparency     double precision    ,
	x3d_ambient_intensity double precision    ,
	x3d_specular_color   text    ,
	x3d_diffuse_color    text    ,
	x3d_emissive_color   text    ,
	x3d_is_smooth        numeric    ,
	tex_image_id         bigint    ,
	tex_texture_type     text    ,
	tex_wrap_mode        text    ,
	tex_border_color     text    ,
	gt_prefer_worldfile  numeric    ,
	gt_orientation       text    ,
	gt_reference_point   geometry(POINT)    ,
	CONSTRAINT surface_data_pk PRIMARY KEY ( id )
 );

CREATE  TABLE surface_data_mapping ( 
	surface_data_id      bigint  NOT NULL  ,
	geometry_data_id     bigint  NOT NULL  ,
	texture_mapping      json    ,
	material_mapping     json    ,
	world_to_texture_mapping json    ,
	CONSTRAINT surface_data_mapping_pk PRIMARY KEY ( geometry_data_id, surface_data_id )
 );

CREATE  TABLE appearance ( 
	id                   bigint DEFAULT nextval('appearance_seq'::regclass) NOT NULL  ,
	objectid             text    ,
	identifier           text    ,
	identifier_codespace text    ,
	theme                text    ,
	creation_date        timestamptz    ,
	termination_date     timestamptz    ,
	valid_from           timestamptz    ,
	valid_to             timestamptz    ,
	is_global            integer    ,
	feature_id           bigint    ,
	CONSTRAINT appearance_pk PRIMARY KEY ( id )
 );

CREATE  TABLE property ( 
	id                   bigint DEFAULT nextval('property_seq'::regclass) NOT NULL  ,
	feature_id           bigint    ,
	parent_id            bigint    ,
	root_id              bigint    ,
	lod                  text    ,
	namespace            text    ,
	name                 text    ,
	index_number         integer    ,
	data_valtype         integer    ,
	val_int              bigint    ,
	val_double           double precision    ,
	val_string           text    ,
	val_date             timestamptz    ,
	val_date_offset      integer    ,
	val_uri              text    ,
	val_address          bigint    ,
	val_geometry         bigint    ,
	val_implicitgeom     bigint    ,
	val_implicitgeom_refpoint geometry(GEOMETRYZ)    ,
	val_implicitgeom_transform text    ,
	val_appearance       bigint    ,
	val_dynamizer        bigint    ,
	val_feature          bigint    ,
	val_is_reference     integer    ,
	val_code             text    ,
	val_codelist         bigint    ,
	val_uom              text    ,
	val_source           text    ,
	val_source_mime_type text    ,
	CONSTRAINT property_pk PRIMARY KEY ( id )
 );

CREATE  TABLE appear_to_surface_data ( 
	surface_data_id      bigint  NOT NULL  ,
	appearance_id        bigint  NOT NULL  ,
	CONSTRAINT appear_to_surface_data_pk PRIMARY KEY ( surface_data_id, appearance_id )
 );

CREATE INDEX address_multi_point_spx ON address USING GiST ( multi_point );

CREATE INDEX address_objectid_inx ON address  ( objectid );

CREATE INDEX codelist_codelist_type_inx ON codelist  ( codelist_type );

CREATE INDEX codelist_entry_codelist_idx ON codelist_entry  ( codelist_id );

CREATE INDEX objectclass_superclass_fkx ON objectclass  ( superclass_id );

CREATE INDEX objectclass_baseclass_fkx ON objectclass  ( baseclass_id );

CREATE INDEX feature_objectclass_fkx ON feature  ( objectclass_id  );

CREATE INDEX feature_objectid_inx ON feature  ( objectid  );

CREATE INDEX feature_envelope_spx ON feature USING GiST ( envelope );

CREATE INDEX feature_identifier_inx ON feature  ( identifier , identifier_codespace );

CREATE INDEX feature_citymodel_fkx ON feature  ( citymodel_id  );

CREATE INDEX feature_hierarchy_root_fkx ON feature_hierarchy  ( root_id );

CREATE INDEX feature_hierarchy_child_fkx ON feature_hierarchy  ( child_id );

CREATE INDEX feature_hierarchy_parent_fkx ON feature_hierarchy  ( parent_id );

CREATE INDEX geometry_data_objectid_inx ON geometry_data  ( objectid );

CREATE INDEX geometry_data_feature_fkx ON geometry_data  ( feature_id );

CREATE INDEX geometry_data_spx ON geometry_data  ( geometry );

CREATE INDEX implicit_geom_ref2lib_inx ON implicit_geometry  ( reference_to_library );

CREATE INDEX implicit_geometry_fkx ON implicit_geometry  ( relative_geometry_id );

CREATE INDEX implicit_geometry_inx ON implicit_geometry  ( objectid );

CREATE INDEX surface_data_objectid_inx ON surface_data  ( objectid );

CREATE INDEX surface_data_tex_image_fkx ON surface_data  ( tex_image_id );

CREATE INDEX surface_data_objclass_fkx ON surface_data  ( objectclass_id );

CREATE INDEX surface_data_spx ON surface_data  ( gt_reference_point );

CREATE INDEX surface_data_identifier_inx ON surface_data  ( identifier, identifier_codespace );

CREATE INDEX surface_data_mapping_fkx1 ON surface_data_mapping  ( geometry_data_id );

CREATE INDEX surface_data_mapping_fkx2 ON surface_data_mapping  ( surface_data_id );

CREATE INDEX appearance_objectid_inx ON appearance  ( objectid );

CREATE INDEX appearance_theme_inx ON appearance  ( theme );

CREATE INDEX appearance_feature_fkx ON appearance  ( feature_id );

CREATE INDEX appearance_identifier_inx ON appearance  ( identifier, identifier_codespace );

CREATE INDEX property_feature_fkx ON property  ( feature_id );

CREATE INDEX property_parent_fkx ON property  ( parent_id );

CREATE INDEX property_namespace_inx ON property  ( namespace );

CREATE INDEX property_name_inx ON property  ( name );

CREATE INDEX property_root_fkx ON property  ( root_id );

CREATE INDEX property_data_valtype_inx ON property  ( data_valtype );

CREATE INDEX property_val_feature_fkx ON property  ( val_feature );

CREATE INDEX property_namespace_name_inx ON property  ( namespace, name );

CREATE INDEX property_val_string_inx ON property  ( val_string );

CREATE INDEX property_val_uom_inx ON property  ( val_uom );

CREATE INDEX property_val_uri_inx ON property  ( val_uri );

CREATE INDEX property_lod_inx ON property  ( lod );

CREATE INDEX property_val_int_inx ON property  ( val_int );

CREATE INDEX property_val_double_inx ON property  ( val_double );

CREATE INDEX property_val_date_inx ON property  ( val_date );

CREATE INDEX property_val_geometry_fkx ON property  ( val_geometry );

CREATE INDEX property_val_implicitgeom_fkx ON property  ( val_implicitgeom );

CREATE INDEX property_val_appearance_fkx ON property  ( val_appearance );

CREATE INDEX property_val_dynamizer_fkx ON property  ( val_dynamizer );

CREATE INDEX property_val_codelist_fkx ON property  ( val_codelist );

CREATE INDEX property_val_address_fkx ON property  ( val_address );

CREATE INDEX property_val_implicitgeom_spx ON property USING GiST ( val_implicitgeom_refpoint );

CREATE INDEX appear_to_surface_data_fkx1 ON appear_to_surface_data  ( surface_data_id );

CREATE INDEX appear_to_surface_data_fkx2 ON appear_to_surface_data  ( appearance_id );

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk1 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE appear_to_surface_data ADD CONSTRAINT appear_to_surface_data_fk2 FOREIGN KEY ( appearance_id ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE appearance ADD CONSTRAINT appearance_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE codelist_entry ADD CONSTRAINT codelist_entry_codelist_fk FOREIGN KEY ( codelist_id ) REFERENCES codelist( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE feature ADD CONSTRAINT feature_objectclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_child_fk FOREIGN KEY ( child_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_parent_fk FOREIGN KEY ( parent_id ) REFERENCES feature( id );

ALTER TABLE feature_hierarchy ADD CONSTRAINT feature_hierarchy_root_fk FOREIGN KEY ( root_id ) REFERENCES feature( id );

ALTER TABLE geometry_data ADD CONSTRAINT geometry_data_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE implicit_geometry ADD CONSTRAINT implicit_geometry_fk FOREIGN KEY ( relative_geometry_id ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_ade_fk FOREIGN KEY ( ade_id ) REFERENCES ade( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_baseclass_fk FOREIGN KEY ( baseclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE objectclass ADD CONSTRAINT objectclass_superclass_fk FOREIGN KEY ( superclass_id ) REFERENCES objectclass( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_appearance_fk FOREIGN KEY ( val_appearance ) REFERENCES appearance( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_codelist_fk FOREIGN KEY ( val_codelist ) REFERENCES codelist( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_feature_fk FOREIGN KEY ( feature_id ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_feature_fk FOREIGN KEY ( val_feature ) REFERENCES feature( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_implicitgeom_fk FOREIGN KEY ( val_implicitgeom ) REFERENCES implicit_geometry( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_parent_fk FOREIGN KEY ( parent_id ) REFERENCES property( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_root_fk FOREIGN KEY ( root_id ) REFERENCES property( id ) ON DELETE CASCADE ON UPDATE CASCADE DEFERRABLE INITIALLY DEFERRED;

ALTER TABLE property ADD CONSTRAINT property_val_geometry_fk FOREIGN KEY ( val_geometry ) REFERENCES geometry_data( id )  ON UPDATE CASCADE;

ALTER TABLE property ADD CONSTRAINT property_val_address_fk FOREIGN KEY ( val_address ) REFERENCES address( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_objclass_fk FOREIGN KEY ( objectclass_id ) REFERENCES objectclass( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data ADD CONSTRAINT surface_data_tex_image_fk FOREIGN KEY ( tex_image_id ) REFERENCES tex_image( id )  ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk1 FOREIGN KEY ( geometry_data_id ) REFERENCES geometry_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE surface_data_mapping ADD CONSTRAINT surface_data_mapping_fk2 FOREIGN KEY ( surface_data_id ) REFERENCES surface_data( id ) ON DELETE CASCADE ON UPDATE CASCADE;
]]></string>
		</script>
	</layout>
	<layout name="Metadata" id="Layout-259f" show_relation="columns" >
		<entity schema="citydb" name="ade" color="3986C1" x="48" y="48" />
		<entity schema="citydb" name="database_srs" color="3986C1" x="576" y="480" />
		<entity schema="citydb" name="objectclass" color="3986C1" x="64" y="448" />
	</layout>
</project>