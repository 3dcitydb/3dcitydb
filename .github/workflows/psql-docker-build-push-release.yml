name: psql-docker-build-push-release

on:
  workflow_dispatch:
  release:
    types: [released, edited]

env:
  IMAGE_NAME: 3dcitydb-pg
  LATEST_BASEIMAGE: '17-3.5'

jobs:
  build-push:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        baseimage-tag: [
          '13-3.0',   '13-3.1',   '13-3.2',   '13-3.3',   '13-3.4',   '13-3.5',
                      '14-3.1',   '14-3.2',   '14-3.3',   '14-3.4',   '14-3.5',
                                              '15-3.3',   '15-3.4',   '15-3.5',
                                                          '16-3.4',   '16-3.5',
                                                          '17-3.4',   '17-3.5'
        ]
        variant: ['', '-alpine']    # image variants: '' = debian

    steps:
    -
      name: Checkout repo
      uses: actions/checkout@v4
    -
      name: Get release version without v
      id: release_version
      uses: battila7/get-version-action@v2
    -
      name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'
    -
      name: Docker login Dockerhub
      id: docker_login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    -
      name: Extract metadata (tags, labels) for docker image
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}
          ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}
        flavor: |
          latest=${{ matrix.baseimage-tag == env.LATEST_BASEIMAGE }}
          prefix=${{ matrix.baseimage-tag }}-
          suffix=${{ matrix.variant }},onlatest=true
        tags: |
          # Latest tag for PR, PR number only
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}
          type=semver,pattern={{major}}.{{minor}}
          # For latest baseimage only: <semver>[-<variant>]
          ${{ matrix.baseimage-tag == env.LATEST_BASEIMAGE && 'type=semver,pattern={{version}},prefix=' || '' }}
          ${{ matrix.baseimage-tag == env.LATEST_BASEIMAGE && 'type=semver,pattern={{major}},prefix=' || '' }}
          ${{ matrix.baseimage-tag == env.LATEST_BASEIMAGE && 'type=semver,pattern={{major}}.{{minor}},prefix=' || '' }}
        labels: |
          maintainer=Bruno Willenborg
          maintainer.email=bruno.willenborg(at)list-eco.de
          maintainer.organization=LIST Eco GmbH & Co. KG
          org.opencontainers.image.authors=Bruno Willenborg
          org.opencontainers.image.vendor=3DCityDB Steering Committee
          org.opencontainers.image.title=3D City Database PostgreSQL/PostGIS Docker image
          org.opencontainers.image.description=Docker image for the 3D City Database based on PostgreSQL and PostGIS
          org.opencontainers.image.url=https://github.com/3dcitydb/
          org.opencontainers.image.documentation=https://3dcitydb.github.io/3dcitydb-mkdocs/
          org.opencontainers.image.source=https://github.com/3dcitydb/3dcitydb
          org.opencontainers.image.version=${{ matrix.baseimage-tag }}-${{ steps.release_version.outputs.version-without-v }}${{ matrix.variant }}
    -
      name: Build and publish
      id: docker_build
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BASEIMAGE_TAG=${{ matrix.baseimage-tag }}${{ matrix.variant }}
    -
      name: Inspect image
      run: docker inspect ${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ matrix.baseimage-tag }}-${{ steps.release_version.outputs.version-without-v }}${{ matrix.variant }}
    -
      name: Inspect image ghcr.io
      run: docker inspect ghcr.io/${{ env.OWNER_LC }}/${{ env.IMAGE_NAME }}:${{ matrix.baseimage-tag }}-${{ steps.release_version.outputs.version-without-v }}${{ matrix.variant }}

  ghcr-cleanup-image:
      name: ghcr cleanup action
      runs-on: ubuntu-latest
      needs:
        - build-push
      steps:
        - name: Delete image
          uses: dataaxiom/ghcr-cleanup-action@v1
          with:
            package: ${{ env.IMAGE_NAME }}
            delete-untagged: true
            delete-ghost-images: true
            delete-partial-images: true
            delete-orphaned-images: true
